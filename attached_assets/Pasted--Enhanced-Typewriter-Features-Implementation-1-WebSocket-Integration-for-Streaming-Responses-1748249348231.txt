# Enhanced Typewriter Features Implementation

## 1. WebSocket Integration for Streaming Responses

### WebSocket Hook with Typewriter Support
**File**: `client/src/hooks/useStreamingTypewriter.ts`

```typescript
import { useState, useEffect, useRef, useCallback } from 'react';
import { useTypewriter } from './useTypewriter';

interface StreamingMessage {
  id: string;
  content: string;
  isComplete: boolean;
  type: 'chat' | 'research';
}

interface UseStreamingTypewriterOptions {
  onComplete?: () => void;
  speed?: number;
  bufferSize?: number; // Characters to buffer before starting typewriter
}

export const useStreamingTypewriter = (
  websocketUrl: string,
  options: UseStreamingTypewriterOptions = {}
) => {
  const {
    onComplete,
    speed = 30,
    bufferSize = 50 // Start typing after 50 chars received
  } = options;

  const [streamingMessage, setStreamingMessage] = useState<StreamingMessage | null>(null);
  const [displayContent, setDisplayContent] = useState('');
  const [isStreaming, setIsStreaming] = useState(false);
  
  const wsRef = useRef<WebSocket | null>(null);
  const bufferRef = useRef<string>('');
  const typewriterQueueRef = useRef<string[]>([]);
  const isTypingRef = useRef(false);

  // Typewriter for current chunk
  const { 
    displayedText, 
    isTyping, 
    skipToEnd 
  } = useTypewriter(displayContent, {
    speed,
    onComplete: () => {
      isTypingRef.current = false;
      processQueue();
    }
  });

  // Process queued chunks
  const processQueue = useCallback(() => {
    if (typewriterQueueRef.current.length > 0 && !isTypingRef.current) {
      const nextChunk = typewriterQueueRef.current.shift()!;
      isTypingRef.current = true;
      setDisplayContent(prev => prev + nextChunk);
    }
  }, []);

  // WebSocket message handler
  const handleWebSocketMessage = useCallback((event: MessageEvent) => {
    try {
      const data = JSON.parse(event.data);
      
      switch (data.type) {
        case 'stream_start':
          setStreamingMessage({
            id: data.id,
            content: '',
            isComplete: false,
            type: data.responseType || 'chat'
          });
          setIsStreaming(true);
          bufferRef.current = '';
          typewriterQueueRef.current = [];
          break;

        case 'stream_chunk':
          bufferRef.current += data.content;
          
          // Start typewriter after buffer threshold
          if (bufferRef.current.length >= bufferSize && !isTypingRef.current) {
            typewriterQueueRef.current.push(bufferRef.current);
            bufferRef.current = '';
            processQueue();
          }
          
          // Update full content for skip functionality
          setStreamingMessage(prev => prev ? {
            ...prev,
            content: prev.content + data.content
          } : null);
          break;

        case 'stream_end':
          // Push remaining buffer
          if (bufferRef.current) {
            typewriterQueueRef.current.push(bufferRef.current);
            bufferRef.current = '';
          }
          
          setStreamingMessage(prev => prev ? {
            ...prev,
            isComplete: true
          } : null);
          setIsStreaming(false);
          
          // Process remaining queue
          if (!isTypingRef.current) {
            processQueue();
          }
          break;

        case 'error':
          console.error('Stream error:', data.error);
          setIsStreaming(false);
          break;
      }
    } catch (error) {
      console.error('WebSocket message parsing error:', error);
    }
  }, [bufferSize, processQueue]);

  // Initialize WebSocket
  useEffect(() => {
    wsRef.current = new WebSocket(websocketUrl);
    
    wsRef.current.onmessage = handleWebSocketMessage;
    wsRef.current.onerror = (error) => {
      console.error('WebSocket error:', error);
      setIsStreaming(false);
    };
    
    return () => {
      wsRef.current?.close();
    };
  }, [websocketUrl, handleWebSocketMessage]);

  // Skip all animations and show full content
  const skipAll = useCallback(() => {
    skipToEnd();
    if (streamingMessage) {
      setDisplayContent(streamingMessage.content);
      typewriterQueueRef.current = [];
    }
  }, [skipToEnd, streamingMessage]);

  return {
    displayedText,
    fullText: streamingMessage?.content || '',
    isStreaming,
    isTyping: isTyping || typewriterQueueRef.current.length > 0,
    skipAll,
    messageType: streamingMessage?.type
  };
};
```

### WebSocket Manager Component
**File**: `client/src/components/chat/StreamingChatMessage.tsx`

```tsx
import React, { useEffect, useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useStreamingTypewriter } from '@/hooks/useStreamingTypewriter';
import { TypewriterText } from '@/components/shared/TypewriterText';
import { Loader2 } from 'lucide-react';

interface StreamingChatMessageProps {
  websocketUrl: string;
  onComplete?: () => void;
}

export const StreamingChatMessage: React.FC<StreamingChatMessageProps> = ({
  websocketUrl,
  onComplete
}) => {
  const {
    displayedText,
    fullText,
    isStreaming,
    isTyping,
    skipAll,
    messageType
  } = useStreamingTypewriter(websocketUrl, {
    speed: messageType === 'research' ? 20 : 30,
    bufferSize: 100,
    onComplete
  });

  const [showThinkingIndicator, setShowThinkingIndicator] = useState(true);

  useEffect(() => {
    // Hide thinking indicator when content starts appearing
    if (displayedText.length > 0) {
      setShowThinkingIndicator(false);
    }
  }, [displayedText]);

  return (
    <div className="relative">
      <AnimatePresence mode="wait">
        {showThinkingIndicator && isStreaming && (
          <motion.div
            key="thinking"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="flex items-center gap-2 text-gray-500"
          >
            <Loader2 className="w-4 h-4 animate-spin" />
            <span className="text-sm">Thinking...</span>
          </motion.div>
        )}

        {displayedText && (
          <motion.div
            key="content"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            onDoubleClick={skipAll}
          >
            <TypewriterText
              text={displayedText}
              speed={0} // Already handled by streaming hook
              renderMarkdown={true}
              showCursor={isTyping}
            />
          </motion.div>
        )}
      </AnimatePresence>

      {/* Skip button for long responses */}
      {isTyping && fullText.length > 500 && (
        <motion.button
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="absolute -bottom-8 left-0 text-xs text-gray-500 hover:text-gray-700"
          onClick={skipAll}
        >
          Skip animation (or double-click)
        </motion.button>
      )}
    </div>
  );
};
```

## 2. Sound Effects System

### Sound Manager
**File**: `client/src/services/soundManager.ts`

```typescript
export class SoundManager {
  private static instance: SoundManager;
  private sounds: Map<string, HTMLAudioElement> = new Map();
  private enabled: boolean = true;
  private volume: number = 0.3;

  private constructor() {
    this.loadSounds();
    this.loadPreferences();
  }

  static getInstance(): SoundManager {
    if (!SoundManager.instance) {
      SoundManager.instance = new SoundManager();
    }
    return SoundManager.instance;
  }

  private loadSounds() {
    const soundFiles = {
      'typewriter-key': '/sounds/typewriter-key.mp3',
      'typewriter-bell': '/sounds/typewriter-bell.mp3',
      'message-sent': '/sounds/message-sent.mp3',
      'message-received': '/sounds/message-received.mp3',
      'complete': '/sounds/complete.mp3'
    };

    Object.entries(soundFiles).forEach(([key, path]) => {
      const audio = new Audio(path);
      audio.volume = this.volume;
      audio.preload = 'auto';
      this.sounds.set(key, audio);
    });
  }

  private loadPreferences() {
    const saved = localStorage.getItem('soundPreferences');
    if (saved) {
      const { enabled, volume } = JSON.parse(saved);
      this.enabled = enabled ?? true;
      this.volume = volume ?? 0.3;
      this.updateVolume();
    }
  }

  savePreferences() {
    localStorage.setItem('soundPreferences', JSON.stringify({
      enabled: this.enabled,
      volume: this.volume
    }));
  }

  play(soundKey: string) {
    if (!this.enabled) return;

    const sound = this.sounds.get(soundKey);
    if (sound) {
      // Clone and play to allow overlapping sounds
      const clone = sound.cloneNode() as HTMLAudioElement;
      clone.volume = this.volume;
      clone.play().catch(err => {
        console.warn('Sound play failed:', err);
      });
    }
  }

  setEnabled(enabled: boolean) {
    this.enabled = enabled;
    this.savePreferences();
  }

  setVolume(volume: number) {
    this.volume = Math.max(0, Math.min(1, volume));
    this.updateVolume();
    this.savePreferences();
  }

  private updateVolume() {
    this.sounds.forEach(sound => {
      sound.volume = this.volume;
    });
  }

  isEnabled() {
    return this.enabled;
  }

  getVolume() {
    return this.volume;
  }
}
```

### Typewriter with Sound Effects
**File**: `client/src/hooks/useTypewriterWithSound.ts`

```typescript
import { useEffect, useRef } from 'react';
import { useTypewriter } from './useTypewriter';
import { SoundManager } from '@/services/soundManager';

interface UseTypewriterWithSoundOptions {
  speed?: number;
  soundInterval?: number; // Play sound every N characters
  onComplete?: () => void;
  enableSound?: boolean;
}

export const useTypewriterWithSound = (
  text: string,
  options: UseTypewriterWithSoundOptions = {}
) => {
  const {
    speed = 30,
    soundInterval = 3, // Play sound every 3 characters
    onComplete,
    enableSound = true
  } = options;

  const soundManager = SoundManager.getInstance();
  const lastSoundIndexRef = useRef(0);
  const prevLengthRef = useRef(0);

  const typewriterResult = useTypewriter(text, {
    speed,
    onComplete: () => {
      if (enableSound && soundManager.isEnabled()) {
        soundManager.play('typewriter-bell');
      }
      onComplete?.();
    }
  });

  const { displayedText } = typewriterResult;

  useEffect(() => {
    if (!enableSound || !soundManager.isEnabled()) return;

    const currentLength = displayedText.length;
    
    // Play sound for new characters
    if (currentLength > prevLengthRef.current) {
      const newChars = currentLength - prevLengthRef.current;
      
      for (let i = 0; i < newChars; i++) {
        const charIndex = prevLengthRef.current + i;
        
        // Play sound at intervals
        if (charIndex - lastSoundIndexRef.current >= soundInterval) {
          // Slight delay for more realistic effect
          setTimeout(() => {
            soundManager.play('typewriter-key');
          }, i * 10);
          lastSoundIndexRef.current = charIndex;
        }
      }
    }
    
    prevLengthRef.current = currentLength;
  }, [displayedText, soundInterval, enableSound, soundManager]);

  return typewriterResult;
};
```

### Sound Settings Component
**File**: `client/src/components/settings/SoundSettings.tsx`

```tsx
import React from 'react';
import { Switch } from '@/components/ui/switch';
import { Slider } from '@/components/ui/slider';
import { Volume2, VolumeX } from 'lucide-react';
import { SoundManager } from '@/services/soundManager';

export const SoundSettings: React.FC = () => {
  const soundManager = SoundManager.getInstance();
  const [enabled, setEnabled] = React.useState(soundManager.isEnabled());
  const [volume, setVolume] = React.useState(soundManager.getVolume());

  const handleToggle = (checked: boolean) => {
    setEnabled(checked);
    soundManager.setEnabled(checked);
  };

  const handleVolumeChange = (value: number[]) => {
    const newVolume = value[0];
    setVolume(newVolume);
    soundManager.setVolume(newVolume);
  };

  return (
    <div className="space-y-4 p-4 border rounded-lg">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          {enabled ? <Volume2 className="w-4 h-4" /> : <VolumeX className="w-4 h-4" />}
          <span className="font-medium">Sound Effects</span>
        </div>
        <Switch
          checked={enabled}
          onCheckedChange={handleToggle}
        />
      </div>

      {enabled && (
        <div className="space-y-2">
          <div className="flex justify-between text-sm text-gray-600">
            <span>Volume</span>
            <span>{Math.round(volume * 100)}%</span>
          </div>
          <Slider
            value={[volume]}
            onValueChange={handleVolumeChange}
            min={0}
            max={1}
            step={0.1}
            className="w-full"
          />
        </div>
      )}
    </div>
  );
};
```

## 3. Code Syntax Highlighting During Typewriter

### Code Block Typewriter Component
**File**: `client/src/components/shared/CodeBlockTypewriter.tsx`

```tsx
import React, { useMemo, useEffect, useState } from 'react';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';
import { useTypewriter } from '@/hooks/useTypewriter';
import { Copy, Check } from 'lucide-react';
import { Button } from '@/components/ui/button';

interface CodeBlockTypewriterProps {
  code: string;
  language: string;
  speed?: number;
  onComplete?: () => void;
}

export const CodeBlockTypewriter: React.FC<CodeBlockTypewriterProps> = ({
  code,
  language,
  speed = 10, // Faster for code
  onComplete
}) => {
  const { displayedText, isTyping, skipToEnd } = useTypewriter(code, {
    speed,
    onComplete
  });
  
  const [copied, setCopied] = useState(false);

  // Determine if we should show syntax highlighting
  // Only highlight when we have complete lines to avoid flickering
  const shouldHighlight = useMemo(() => {
    const lines = displayedText.split('\n');
    const lastLine = lines[lines.length - 1];
    
    // Highlight if typing is complete or last line looks complete
    return !isTyping || lastLine.endsWith(';') || lastLine.endsWith('}') || 
           lastLine.endsWith(')') || lastLine.trim() === '';
  }, [displayedText, isTyping]);

  const handleCopy = async () => {
    await navigator.clipboard.writeText(code);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  return (
    <div className="relative group">
      <div className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
        <Button
          size="sm"
          variant="ghost"
          onClick={handleCopy}
          className="h-8 px-2"
        >
          {copied ? (
            <Check className="w-4 h-4" />
          ) : (
            <Copy className="w-4 h-4" />
          )}
        </Button>
      </div>

      <div onDoubleClick={skipToEnd} className="cursor-text">
        {shouldHighlight ? (
          <SyntaxHighlighter
            language={language}
            style={vscDarkPlus}
            customStyle={{
              margin: 0,
              padding: '1rem',
              fontSize: '0.875rem'
            }}
          >
            {displayedText}
          </SyntaxHighlighter>
        ) : (
          <pre className="bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto">
            <code className="text-sm font-mono">
              {displayedText}
              {isTyping && (
                <span className="inline-block w-2 h-4 bg-gray-100 ml-0.5 animate-pulse" />
              )}
            </code>
          </pre>
        )}
      </div>
    </div>
  );
};
```

### Enhanced Markdown Renderer with Code Support
**File**: `client/src/components/shared/MarkdownTypewriter.tsx`

```tsx
import React from 'react';
import ReactMarkdown from 'react-markdown';
import { CodeBlockTypewriter } from './CodeBlockTypewriter';
import { TypewriterText } from './TypewriterText';

interface MarkdownTypewriterProps {
  content: string;
  isTyping?: boolean;
  speed?: number;
}

export const MarkdownTypewriter: React.FC<MarkdownTypewriterProps> = ({
  content,
  isTyping = false,
  speed = 30
}) => {
  return (
    <ReactMarkdown
      components={{
        code({ node, inline, className, children, ...props }) {
          const match = /language-(\w+)/.exec(className || '');
          const language = match ? match[1] : '';
          const codeString = String(children).replace(/\n$/, '');

          if (!inline && language) {
            // For code blocks, use special typewriter
            if (isTyping) {
              return (
                <CodeBlockTypewriter
                  code={codeString}
                  language={language}
                  speed={10}
                />
              );
            }
            
            // Static code block
            return (
              <SyntaxHighlighter
                language={language}
                style={vscDarkPlus}
                customStyle={{
                  margin: '0.5rem 0',
                  fontSize: '0.875rem'
                }}
              >
                {codeString}
              </SyntaxHighlighter>
            );
          }

          // Inline code
          return (
            <code className="px-1 py-0.5 bg-gray-100 rounded text-sm" {...props}>
              {children}
            </code>
          );
        },
        p({ children }) {
          // For paragraphs, use typewriter if currently typing
          if (isTyping && typeof children === 'string') {
            return (
              <TypewriterText
                text={children}
                speed={speed}
                className="mb-4"
              />
            );
          }
          return <p className="mb-4">{children}</p>;
        }
      }}
    >
      {content}
    </ReactMarkdown>
  );
};
```

## 4. Advanced Error Handling

### Error Boundary for Typewriter
**File**: `client/src/components/shared/TypewriterErrorBoundary.tsx`

```tsx
import React, { Component, ErrorInfo, ReactNode } from 'react';
import { AlertCircle } from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';

interface Props {
  children: ReactNode;
  fallbackComponent?: ReactNode;
}

interface State {
  hasError: boolean;
  error: Error | null;
}

export class TypewriterErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Typewriter error:', error, errorInfo);
    
    // Send to error tracking service
    if (window.errorTracking) {
      window.errorTracking.captureException(error, {
        tags: {
          component: 'typewriter',
          errorBoundary: true
        },
        extra: errorInfo
      });
    }
  }

  render() {
    if (this.state.hasError) {
      if (this.props.fallbackComponent) {
        return this.props.fallbackComponent;
      }

      return (
        <Alert variant="destructive" className="my-4">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>
            An error occurred while displaying this message. 
            The content has been shown without animation.
          </AlertDescription>
        </Alert>
      );
    }

    return this.props.children;
  }
}
```

### Robust Typewriter Hook with Error Handling
**File**: `client/src/hooks/useRobustTypewriter.ts`

```typescript
import { useState, useEffect, useRef, useCallback } from 'react';

interface UseRobustTypewriterOptions {
  speed?: number;
  maxRetries?: number;
  onError?: (error: Error) => void;
  onComplete?: () => void;
}

export const useRobustTypewriter = (
  text: string,
  options: UseRobustTypewriterOptions = {}
) => {
  const {
    speed = 30,
    maxRetries = 3,
    onError,
    onComplete
  } = options;

  const [displayedText, setDisplayedText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [error, setError] = useState<Error | null>(null);
  const [retryCount, setRetryCount] = useState(0);
  
  const animationRef = useRef<number | null>(null);
  const indexRef = useRef(0);
  const startTimeRef = useRef<number | null>(null);

  const cleanup = useCallback(() => {
    if (animationRef.current) {
      cancelAnimationFrame(animationRef.current);
      animationRef.current = null;
    }
  }, []);

  const reset = useCallback(() => {
    cleanup();
    setDisplayedText('');
    setIsTyping(false);
    indexRef.current = 0;
    startTimeRef.current = null;
  }, [cleanup]);

  const animate = useCallback((timestamp: number) => {
    try {
      if (!startTimeRef.current) {
        startTimeRef.current = timestamp;
      }

      const elapsed = timestamp - startTimeRef.current;
      const targetIndex = Math.floor(elapsed / speed);

      if (targetIndex > indexRef.current && indexRef.current < text.length) {
        indexRef.current = Math.min(targetIndex, text.length);
        
        // Validate text slicing
        if (indexRef.current < 0 || indexRef.current > text.length) {
          throw new Error(`Invalid index: ${indexRef.current} for text length: ${text.length}`);
        }
        
        setDisplayedText(text.slice(0, indexRef.current));

        if (indexRef.current < text.length) {
          animationRef.current = requestAnimationFrame(animate);
        } else {
          setIsTyping(false);
          onComplete?.();
        }
      } else if (indexRef.current < text.length) {
        animationRef.current = requestAnimationFrame(animate);
      }
    } catch (err) {
      const error = err as Error;
      console.error('Animation error:', error);
      setError(error);
      setIsTyping(false);
      
      // Attempt recovery
      if (retryCount < maxRetries) {
        setRetryCount(prev => prev + 1);
        setTimeout(() => {
          reset();
          setError(null);
        }, 1000);
      } else {
        // Fallback: show full text
        setDisplayedText(text);
        onError?.(error);
      }
    }
  }, [text, speed, onComplete, onError, reset, retryCount, maxRetries]);

  useEffect(() => {
    // Validate input
    if (typeof text !== 'string') {
      const error = new Error(`Invalid text type: ${typeof text}`);
      setError(error);
      onError?.(error);
      return;
    }

    if (text.length === 0) {
      setDisplayedText('');
      return;
    }

    // Reset and start animation
    reset();
    setIsTyping(true);
    setError(null);
    
    // Start with a small delay to ensure proper initialization
    const timeoutId = setTimeout(() => {
      animationRef.current = requestAnimationFrame(animate);
    }, 10);

    return () => {
      clearTimeout(timeoutId);
      cleanup();
    };
  }, [text, animate, reset, cleanup, onError]);

  const skipToEnd = useCallback(() => {
    cleanup();
    setDisplayedText(text);
    setIsTyping(false);
    indexRef.current = text.length;
    onComplete?.();
  }, [text, cleanup, onComplete]);

  const retry = useCallback(() => {
    setRetryCount(0);
    setError(null);
    reset();
  }, [reset]);

  return {
    displayedText,
    isTyping,
    error,
    skipToEnd,
    retry,
    progress: text.length > 0 ? (displayedText.length / text.length) : 0
  };
};
```

### Error Recovery Component
**File**: `client/src/components/shared/TypewriterWithRecovery.tsx`

```tsx
import React from 'react';
import { useRobustTypewriter } from '@/hooks/useRobustTypewriter';
import { TypewriterErrorBoundary } from './TypewriterErrorBoundary';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';
import { RefreshCw } from 'lucide-react';

interface TypewriterWithRecoveryProps {
  text: string;
  speed?: number;
  className?: string;
  onComplete?: () => void;
}

const TypewriterContent: React.FC<TypewriterWithRecoveryProps> = ({
  text,
  speed,
  className,
  onComplete
}) => {
  const { 
    displayedText, 
    isTyping, 
    error, 
    skipToEnd, 
    retry,
    progress 
  } = useRobustTypewriter(text, {
    speed,
    onComplete,
    onError: (err) => {
      console.error('Typewriter failed:', err);
    }
  });

  if (error) {
    return (
      <div className="space-y-2">
        <Alert variant="destructive">
          <AlertDescription>
            Failed to animate text. Showing full content.
          </AlertDescription>
        </Alert>
        <div className={className}>{text}</div>
        <Button
          size="sm"
          variant="outline"
          onClick={retry}
          className="mt-2"
        >
          <RefreshCw className="w-3 h-3 mr-1" />
          Retry Animation
        </Button>
      </div>
    );
  }

  return (
    <div className={className} onDoubleClick={skipToEnd}>
      {displayedText}
      {isTyping && (
        <span className="inline-block w-0.5 h-5 bg-current ml-0.5 animate-pulse" />
      )}
      
      {/* Progress indicator for long texts */}
      {text.length > 1000 && isTyping && (
        <div className="mt-2 w-full bg-gray-200 rounded-full h-1">
          <div 
            className="bg-blue-500 h-1 rounded-full transition-all duration-300"
            style={{ width: `${progress * 100}%` }}
          />
        </div>
      )}
    </div>
  );
};

export const TypewriterWithRecovery: React.FC<TypewriterWithRecoveryProps> = (props) => {
  return (
    <TypewriterErrorBoundary
      fallbackComponent={
        <div className={props.className}>{props.text}</div>
      }
    >
      <TypewriterContent {...props} />
    </TypewriterErrorBoundary>
  );
};
```

### WebSocket Error Handling
**File**: `client/src/hooks/useWebSocketWithRetry.ts`

```typescript
import { useEffect, useRef, useState, useCallback } from 'react';

interface WebSocketOptions {
  maxRetries?: number;
  retryDelay?: number;
  heartbeatInterval?: number;
  onMessage?: (data: any) => void;
  onError?: (error: Error) => void;
  onReconnect?: () => void;
}

export const useWebSocketWithRetry = (url: string, options: WebSocketOptions = {}) => {
  const {
    maxRetries = 5,
    retryDelay = 1000,
    heartbeatInterval = 30000,
    onMessage,
    onError,
    onReconnect
  } = options;

  const [connectionState, setConnectionState] = useState<'connecting' | 'connected' | 'disconnected' | 'error'>('connecting');
  const [retryCount, setRetryCount] = useState(0);
  
  const wsRef = useRef<WebSocket | null>(null);
  const heartbeatRef = useRef<NodeJS.Timeout | null>(null);
  const retryTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  const clearTimers = useCallback(() => {
    if (heartbeatRef.current) {
      clearInterval(heartbeatRef.current);
      heartbeatRef.current = null;
    }
    if (retryTimeoutRef.current) {
      clearTimeout(retryTimeoutRef.current);
      retryTimeoutRef.current = null;
    }
  }, []);

  const setupHeartbeat = useCallback(() => {
    heartbeatRef.current = setInterval(() => {
      if (wsRef.current?.readyState === WebSocket.OPEN) {
        wsRef.current.send(JSON.stringify({ type: 'ping' }));
      }
    }, heartbeatInterval);
  }, [heartbeatInterval]);

  const connect = useCallback(() => {
    try {
      clearTimers();
      
      const ws = new WebSocket(url);
      wsRef.current = ws;
      
      ws.onopen = () => {
        setConnectionState('connected');
        setRetryCount(0);
        setupHeartbeat();
        
        if (retryCount > 0) {
          onReconnect?.();
        }
      };

      ws.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          
          // Ignore pong messages
          if (data.type !== 'pong') {
            onMessage?.(data);
          }
        } catch (err) {
          console.error('Message parse error:', err);
          onError?.(new Error(`Failed to parse message: ${err}`));
        }
      };

      ws.onerror = (event) => {
        console.error('WebSocket error:', event);
        setConnectionState('error');
        onError?.(new Error('WebSocket connection error'));
      };

      ws.onclose = () => {
        setConnectionState('disconnected');
        clearTimers();
        
        // Attempt reconnection
        if (retryCount < maxRetries) {
          const delay = retryDelay * Math.pow(2, retryCount); // Exponential backoff
          
          retryTimeoutRef.current = setTimeout(() => {
            setRetryCount(prev => prev + 1);
            setConnectionState('connecting');
            connect();
          }, delay);
        } else {
          setConnectionState('error');
          onError?.(new Error('Max reconnection attempts reached'));
        }
      };
    } catch (err) {
      console.error('Connection error:', err);
      setConnectionState('error');
      onError?.(err as Error);
    }
  }, [url, retryCount, maxRetries, retryDelay, setupHeartbeat, clearTimers, onMessage, onError, onReconnect]);

  useEffect(() => {
    connect();
    
    return () => {
      clearTimers();
      if (wsRef.current) {
        wsRef.current.close();
      }
    };
  }, [connect]);

  const sendMessage = useCallback((data: any) => {
    if (wsRef.current?.readyState === WebSocket.OPEN) {
      wsRef.current.send(JSON.stringify(data));
    } else {
      throw new Error('WebSocket is not connected');
    }
  }, []);

  const reconnect = useCallback(() => {
    setRetryCount(0);
    if (wsRef.current) {
      wsRef.current.close();
    }
    connect();
  }, [connect]);

  return {
    connectionState,
    sendMessage,
    reconnect,
    retryCount
  };
};
```

## Integration Example

### Complete Chat Component with All Features
**File**: `client/src/components/chat/EnhancedChatInterface.tsx`

```tsx
import React, { useState } from 'react';
import { TypewriterErrorBoundary } from '@/components/shared/TypewriterErrorBoundary';
import { StreamingChatMessage } from './StreamingChatMessage';
import { SoundSettings } from '@/components/settings/SoundSettings';
import { useWebSocketWithRetry } from '@/hooks/useWebSocketWithRetry';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Loader2, Wifi, WifiOff } from 'lucide-react';

export const EnhancedChatInterface: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  
  const { connectionState, sendMessage } = useWebSocketWithRetry(
    process.env.VITE_WS_URL || 'ws://localhost:3001',
    {
      onMessage: (data) => {
        // Handle incoming messages
        if (data.type === 'message') {
          setMessages(prev => [...prev, data.message]);
        }
      },
      onError: (error) => {
        console.error('WebSocket error:', error);
      },
      onReconnect: () => {
        console.log('WebSocket reconnected');
      }
    }
  );

  return (
    <div className="flex flex-col h-full">
      {/* Connection status */}
      <div className="flex items-center justify-between p-4 border-b">
        <h2 className="text-lg font-semibold">AI Chat</h2>
        <div className="flex items-center gap-4">
          <SoundSettings />
          <div className="flex items-center gap-2">
            {connectionState === 'connected' ? (
              <><Wifi className="w-4 h-4 text-green-500" /> Connected</>
            ) : connectionState === 'connecting' ? (
              <><Loader2 className="w-4 h-4 animate-spin" /> Connecting...</>
            ) : (
              <><WifiOff className="w-4 h-4 text-red-500" /> Disconnected</>
            )}
          </div>
        </div>
      </div>

      {/* Messages area */}
      <div className="flex-1 overflow-y-auto p-4">
        <TypewriterErrorBoundary>
          {messages.map((message, index) => (
            <StreamingChatMessage
              key={message.id}
              websocketUrl={process.env.VITE_WS_URL || 'ws://localhost:3001'}
              onComplete={() => {
                // Handle completion
              }}
            />
          ))}
        </TypewriterErrorBoundary>
      </div>

      {/* Input area */}
      <div className="p-4 border-t">
        {/* Chat input implementation */}
      </div>
    </div>
  );
};
```

## Implementation Checklist

### WebSocket Streaming
- [ ] Implement `useStreamingTypewriter` hook
- [ ] Create `StreamingChatMessage` component
- [ ] Add buffer management for smooth typing
- [ ] Handle stream start/chunk/end events
- [ ] Implement queue system for chunks

### Sound Effects
- [ ] Create `SoundManager` singleton
- [ ] Add sound files to public directory
- [ ] Implement `useTypewriterWithSound` hook
- [ ] Create sound settings UI
- [ ] Add volume controls and preferences

### Code Highlighting
- [ ] Install syntax highlighting dependencies
- [ ] Create `CodeBlockTypewriter` component
- [ ] Implement smart highlighting logic
- [ ] Add copy functionality
- [ ] Handle multiple languages

### Error Handling
- [ ] Create `TypewriterErrorBoundary`
- [ ] Implement `useRobustTypewriter` with retry
- [ ] Add WebSocket reconnection logic
- [ ] Create error recovery UI
- [ ] Add progress indicators

### Testing
- [ ] Test WebSocket connection failures
- [ ] Test long text performance
- [ ] Test sound playback on mobile
- [ ] Test code highlighting accuracy
- [ ] Test error recovery flows