import { defineConfig, loadEnv } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import { fileURLToPath } from 'node:url';

// Constants
const __dirname = path.dirname(fileURLToPath(import.meta.url));
const isReplit = !!process.env.REPL_ID;
const isDev = process.env.NODE_ENV !== "production";

// Lazy load Replit plugins only when needed
const loadReplitPlugins = async () => {
  if (!isReplit) return [];
  
  const plugins = [];
  
  // Runtime error overlay for development
  if (isDev) {
    const { default: runtimeErrorOverlay } = await import("@replit/vite-plugin-runtime-error-modal");
    plugins.push(runtimeErrorOverlay());
    
    const { cartographer } = await import("@replit/vite-plugin-cartographer");
    plugins.push(cartographer());
  }
  
  return plugins;
};

export default defineConfig(async ({ mode }) => {
  // Load env variables
  const env = loadEnv(mode, process.cwd(), '');
  
  // Load Replit plugins if needed
  const replitPlugins = await loadReplitPlugins();
  
  return {
    plugins: [
      react({
        jsxRuntime: 'automatic',
        // Optimize refresh boundary checks
        fastRefresh: true,
        // Exclude node_modules from transform
        exclude: /node_modules/,
        // Include only necessary files
        include: '**/*.{tsx,ts,jsx,js}',
      }),
      ...replitPlugins,
    ],
    
    server: {
      host: '0.0.0.0',
      port: 5173,
      strictPort: false,
      // Optimize HMR for Replit
      hmr: isReplit ? {
        clientPort: 443,
        protocol: 'wss',
      } : true,
      // Prebundle dependencies for faster cold starts
      warmup: {
        clientFiles: [
          './src/main.tsx',
          './src/pages/research-agent.tsx',
        ]
      }
    },
    
    resolve: {
      alias: {
        "@": path.resolve(__dirname, "./client/src"),
        "@shared": path.resolve(__dirname, "./shared"),
        "@assets": path.resolve(__dirname, "./attached_assets"),
      },
      // Prefer source files over compiled
      extensions: ['.tsx', '.ts', '.jsx', '.js'],
    },
    
    root: path.resolve(__dirname, "./client"),
    
    build: {
      outDir: path.resolve(__dirname, "./dist/public"),
      emptyOutDir: true,
      // Optimize build
      target: 'es2020',
      minify: 'esbuild',
      // Enable CSS code splitting
      cssCodeSplit: true,
      // Optimize chunk size
      rollupOptions: {
        output: {
          manualChunks: {
            'react-vendor': ['react', 'react-dom'],
            'ui-vendor': ['@radix-ui/react-dialog', '@radix-ui/react-toast'],
            'utils': ['clsx', 'tailwind-merge', 'date-fns'],
          },
        },
      },
      // Increase chunk size warning limit
      chunkSizeWarningLimit: 1000,
    },
    
    optimizeDeps: {
      // Include commonly used dependencies
      include: [
        'react',
        'react-dom',
        'react/jsx-runtime',
        'react/jsx-dev-runtime',
        '@tanstack/react-query',
        'wouter',
        'lucide-react',
        'clsx',
        'tailwind-merge',
      ],
      // Don't force optimization in production
      force: isDev,
      // Exclude large or problematic dependencies
      exclude: ['@replit/vite-plugin-runtime-error-modal', '@replit/vite-plugin-cartographer'],
    },
    
    esbuild: {
      // Optimize JSX transform
      jsx: 'automatic',
      jsxDev: isDev,
      jsxImportSource: 'react',
      // Drop console.logs in production
      drop: mode === 'production' ? ['console', 'debugger'] : [],
      // Target modern browsers
      target: 'es2020',
    },
    
    define: {
      'process.env.NODE_ENV': JSON.stringify(mode),
      // Define feature flags
      __DEV__: isDev,
      __PROD__: !isDev,
    },
    
    // Performance optimizations
    css: {
      // Enable CSS modules
      modules: {
        localsConvention: 'camelCase',
      },
      // Optimize CSS
      devSourcemap: isDev,
    },
    
    // Preview server configuration
    preview: {
      port: 4173,
      host: '0.0.0.0',
    },
  };
});