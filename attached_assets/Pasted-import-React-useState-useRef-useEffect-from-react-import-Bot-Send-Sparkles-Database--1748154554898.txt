import React, { useState, useRef, useEffect } from 'react';
import { Bot, Send, Sparkles, Database, Search, FileText, Settings, Zap, Loader2, MessageSquare, User, TrendingUp, AlertCircle, Copy, Share2, Bookmark, Plus, Menu, X } from 'lucide-react';

const formatRelativeTime = (timestamp: string) => {
  try {
    const now = new Date();
    const messageTime = new Date(timestamp);
    
    if (isNaN(messageTime.getTime())) {
      return 'Just now';
    }
    
    const diffInMinutes = Math.floor((now.getTime() - messageTime.getTime()) / (1000 * 60));

    if (diffInMinutes < 1) return 'Just now';
    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;
    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;
    return `${Math.floor(diffInMinutes / 1440)}d ago`;
  } catch (error) {
    console.error('Error formatting time:', error);
    return 'Just now';
  }
};

// API Service for research
class ResearchAPI {
  private baseUrl = '/api'; // Adjust this to match your backend endpoint

  async performResearch(params: {
    query: string;
    depth: number;
    modelId?: string;
    includeMarketData?: boolean;
    includeNews?: boolean;
  }): Promise<{
    report: string;
    sources: Array<{ title: string; url: string; domain: string; content?: string }>;
    depth: number;
    processingTime: number;
  }> {
    const response = await fetch(`${this.baseUrl}/research`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        query: params.query,
        depth: params.depth,
        modelId: params.modelId || 'deepseek-chat',
        includeMarketData: params.includeMarketData || false,
        includeNews: params.includeNews || true,
        researchLength: 'comprehensive',
        researchTone: 'analytical',
        minWordCount: params.depth === 3 ? 3000 : params.depth === 2 ? 2000 : 1000,
        researchDepth: params.depth
      }),
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);
    }

    return await response.json();
  }

  // For demo purposes, if backend is not available, use this mock
  async performMockResearch(params: {
    query: string;
    depth: number;
  }): Promise<{
    report: string;
    sources: Array<{ title: string; url: string; domain: string; content?: string }>;
    depth: number;
    processingTime: number;
  }> {
    // Simulate network delay
    await new Promise(resolve => setTimeout(resolve, 2000 + Math.random() * 3000));

    // Simulate occasional failures for demonstration
    if (Math.random() < 0.15) { // 15% failure rate
      throw new Error('Service temporarily unavailable - please try again');
    }

    const isFinancial = /(?:forex|currency|exchange rate|trading|market|price|financial|investment|stock|crypto|bitcoin|ethereum|USD|EUR|GBP|JPY|analysis)/i.test(params.query);
    
    if (isFinancial) {
      return {
        report: `# Financial Market Analysis: ${params.query}

## Executive Summary
Based on comprehensive analysis from multiple financial data sources and real-time market feeds, here's the current market assessment for your query.

## Current Market Conditions
- **Market Sentiment**: Mixed with cautious optimism
- **Volatility Index**: Moderate levels observed
- **Trading Volume**: Above average activity detected
- **Key Support/Resistance**: Technical levels identified

## Technical Analysis
### Short-term Outlook (1-7 days)
- Price action showing consolidation patterns
- Moving averages suggest neutral momentum
- RSI indicators in normal range

### Medium-term Outlook (1-4 weeks)  
- Trend analysis indicates potential directional movement
- Key economic events may influence price action
- Market structure remains intact

## Fundamental Factors
- **Economic Indicators**: Recent data shows mixed signals
- **Central Bank Policy**: Current monetary stance considered
- **Geopolitical Events**: Regional developments monitored
- **Market Correlations**: Cross-asset relationships analyzed

## Risk Assessment
- **High Risk**: Potential for increased volatility around key events
- **Medium Risk**: Normal market fluctuations expected
- **Low Risk**: Stable underlying fundamentals

## Trading Recommendations
1. **Entry Levels**: Wait for clear breakout confirmation
2. **Stop Loss**: Implement appropriate risk management
3. **Take Profit**: Consider multiple target levels
4. **Position Size**: Adjust based on risk tolerance

## Key Levels to Watch
- **Support**: Previous swing lows and technical indicators
- **Resistance**: Key psychological and technical levels  
- **Breakout Zones**: Areas of potential price acceleration

## Conclusion
The analysis suggests a measured approach with careful attention to risk management. Monitor key economic releases and technical developments for optimal entry timing.

*Note: This analysis is based on current market conditions and historical patterns. Markets can be unpredictable and past performance doesn't guarantee future results.*`,
        sources: [
          { title: 'Reuters Financial Markets Update', url: 'https://reuters.com/markets', domain: 'reuters.com' },
          { title: 'Bloomberg Economic Analysis', url: 'https://bloomberg.com/economics', domain: 'bloomberg.com' },
          { title: 'Financial Times Market Report', url: 'https://ft.com/markets', domain: 'ft.com' },
          { title: 'MarketWatch Technical Analysis', url: 'https://marketwatch.com/tools', domain: 'marketwatch.com' },
          { title: 'Yahoo Finance Data Feed', url: 'https://finance.yahoo.com', domain: 'yahoo.com' }
        ],
        depth: params.depth,
        processingTime: 4500
      };
    }

    return {
      report: `# Research Analysis: ${params.query}

## Executive Summary
Comprehensive analysis completed for "${params.query}" using advanced research methodologies and multiple verified sources.

## Key Findings

### 1. Primary Research Insights
Based on extensive data collection and analysis, several key themes have emerged that directly address your research question.

### 2. Market Overview
- Current trends show evolving patterns in the subject area
- Stakeholder perspectives indicate varied approaches to the topic
- Recent developments suggest continued interest and growth

### 3. Technical Analysis
- **Data Quality**: High-confidence information sources utilized
- **Coverage Depth**: Multi-dimensional analysis approach
- **Verification Process**: Cross-reference validation completed
- **Source Diversity**: Academic, industry, and news sources included

### 4. Strategic Implications
The research reveals several actionable insights:
- Emerging opportunities in the sector
- Potential challenges and mitigation strategies  
- Timeline considerations for implementation
- Resource requirements and allocation recommendations

## Detailed Analysis

### Current State Assessment
The present landscape shows dynamic activity with multiple factors influencing outcomes. Key indicators suggest sustained interest from major stakeholders.

### Future Projections
Based on current trends and historical patterns, the outlook appears positive with several growth drivers identified.

### Risk Factors
- Market volatility considerations
- Regulatory environment changes
- Competitive landscape shifts
- Technology adoption rates

## Recommendations

1. **Immediate Actions**: Priority items requiring attention
2. **Medium-term Strategy**: 3-6 month planning considerations  
3. **Long-term Vision**: Strategic positioning for future growth
4. **Risk Management**: Mitigation strategies for identified risks

## Conclusion
The research provides a solid foundation for decision-making with comprehensive data backing key recommendations. Continued monitoring of key indicators is advised.`,
      sources: [
        { title: 'Industry Research Report 2024', url: 'https://example-research.com/report', domain: 'example-research.com' },
        { title: 'Academic Study on Topic Trends', url: 'https://university.edu/study', domain: 'university.edu' },
        { title: 'Market Analysis White Paper', url: 'https://consulting-firm.com/analysis', domain: 'consulting-firm.com' },
        { title: 'Government Statistical Data', url: 'https://gov-stats.gov/data', domain: 'gov-stats.gov' }
      ],
      depth: params.depth,
      processingTime: 3200
    };
  }
}

// Simple UI components
const Button = ({ onClick, disabled, className = "", children }: any) => (
  <button
    onClick={onClick}
    disabled={disabled}
    className={`px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white rounded-lg transition-colors ${className}`}
  >
    {children}
  </button>
);

const Textarea = ({ value, onChange, onKeyDown, placeholder, className = "", rows, textareaRef }: any) => (
  <textarea
    ref={textareaRef}
    value={value}
    onChange={onChange}
    onKeyDown={onKeyDown}
    placeholder={placeholder}
    rows={rows}
    className={`w-full p-4 bg-zinc-800/50 border border-zinc-700/50 rounded-lg text-zinc-100 placeholder-zinc-400 resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${className}`}
  />
);

const Select = ({ value, onValueChange }: { value: string; onValueChange: (value: string) => void }) => {
  const [isOpen, setIsOpen] = useState(false);
  return (
    <div className="relative">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="px-4 py-2 bg-zinc-800/50 border border-zinc-700/50 rounded-lg text-zinc-100 flex items-center space-x-2"
      >
        <span>{value === '3' ? 'Deep (25K)' : value === '2' ? 'Standard (15K)' : value === '1' ? 'Quick (8K)' : value}</span>
      </button>
      {isOpen && (
        <div className="absolute top-full mt-1 w-full bg-zinc-800 border border-zinc-700 rounded-lg shadow-xl z-10">
          <div onClick={() => { onValueChange('1'); setIsOpen(false); }} className="px-4 py-2 hover:bg-zinc-700 cursor-pointer">Quick (8K)</div>
          <div onClick={() => { onValueChange('2'); setIsOpen(false); }} className="px-4 py-2 hover:bg-zinc-700 cursor-pointer">Standard (15K)</div>
          <div onClick={() => { onValueChange('3'); setIsOpen(false); }} className="px-4 py-2 hover:bg-zinc-700 cursor-pointer">Deep (25K)</div>
        </div>
      )}
    </div>
  );
};

const ResearchProgress = ({ stage, progress, query, isActive }: {
  stage: number;
  progress: number;
  query: string;
  isActive: boolean;
}) => {
  const getStageText = (stage: number) => {
    switch (stage) {
      case 1: return "Initializing search engines...";
      case 2: return "Gathering information from sources...";
      case 3: return "Processing and analyzing data...";
      case 4: return "Cross-referencing findings...";
      case 5: return "Generating comprehensive report...";
      case 6: return "Finalizing analysis...";
      default: return "Analyzing sources and generating insights...";
    }
  };

  return (
    <div className="bg-zinc-900/70 border border-zinc-700/50 rounded-xl p-6 backdrop-blur-sm">
      <div className="flex items-center space-x-3 mb-4">
        <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
          <Search className="w-4 h-4 text-white" />
        </div>
        <div>
          <h3 className="text-sm font-semibold text-zinc-100">Researching...</h3>
          <p className="text-xs text-zinc-400">{query}</p>
        </div>
      </div>

      <div className="space-y-3">
        <div className="flex justify-between items-center">
          <span className="text-xs text-blue-400">Stage {stage}/6</span>
          <span className="text-xs text-zinc-400">{Math.round(progress)}%</span>
        </div>

        <div className="w-full bg-zinc-800/50 rounded-full h-2 overflow-hidden">
          <div 
            className="h-full bg-gradient-to-r from-blue-500 via-purple-500 to-cyan-400 rounded-full transition-all duration-1000 ease-out"
            style={{ width: `${Math.max(progress, 5)}%` }}
          />
        </div>

        {isActive && (
          <div className="flex items-center space-x-2 text-xs text-blue-400">
            <div className="w-1.5 h-1.5 bg-blue-400 rounded-full animate-pulse" />
            <span>{getStageText(stage)}</span>
          </div>
        )}
      </div>
    </div>
  );
};

const ResearchResponse = ({ content, timestamp, sources, isError }: {
  content: string;
  timestamp: string;
  sources?: Array<{ title: string; url: string; domain: string; }>;
  isError?: boolean;
}) => {
  const [copySuccess, setCopySuccess] = useState('');

  const handleCopy = () => {
    navigator.clipboard.writeText(content);
    setCopySuccess('Copied!');
    setTimeout(() => setCopySuccess(''), 2000);
  };

  return (
    <div className={`group backdrop-blur-sm border p-6 rounded-2xl hover:border-zinc-700/60 transition-all duration-200 shadow-lg ${
      isError 
        ? 'bg-red-900/20 border-red-800/50 hover:border-red-700/60' 
        : 'bg-zinc-900/60 border-zinc-800/50'
    }`}>
      <div className="flex items-center justify-between mb-5 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
        <div className="flex items-center space-x-3 text-xs text-zinc-400">
          <div className="flex items-center space-x-1">
            <div className={`w-2 h-2 rounded-full ${isError ? 'bg-red-400' : 'bg-green-400'}`} />
            <span>AI Research Assistant</span>
          </div>
          <span>•</span>
          <span>{formatRelativeTime(timestamp)}</span>
        </div>
        <div className="flex items-center space-x-1">
          <Button 
            onClick={handleCopy} 
            className="h-7 w-7 p-0 hover:bg-zinc-800/60 bg-transparent border-none text-zinc-400 hover:text-zinc-200"
          >
            <Copy className="w-3 h-3" />
          </Button>
          <Button className="h-7 w-7 p-0 hover:bg-zinc-800/60 bg-transparent border-none text-zinc-400 hover:text-zinc-200">
            <Share2 className="w-3 h-3" />
          </Button>
          <Button className="h-7 w-7 p-0 hover:bg-zinc-800/60 bg-transparent border-none text-zinc-400 hover:text-zinc-200">
            <Bookmark className="w-3 h-3" />
          </Button>
        </div>
      </div>

      <div className="prose prose-invert max-w-none">
        <div className="space-y-6 text-zinc-200">
          {content.split('\n\n').map((paragraph, idx) => {
            if (paragraph.startsWith('# ')) {
              return (
                <h1 key={idx} className="text-2xl font-bold text-zinc-100 mb-4 pb-3 border-b border-zinc-700/50 flex items-center">
                  {isError ? <AlertCircle className="w-6 h-6 mr-3 text-red-400" /> : <TrendingUp className="w-6 h-6 mr-3 text-blue-400" />}
                  {paragraph.replace('# ', '')}
                </h1>
              );
            } else if (paragraph.startsWith('## ')) {
              return (
                <h2 key={idx} className="text-xl font-semibold text-zinc-100 mb-3 mt-8 flex items-center">
                  <div className={`w-1 h-6 rounded-full mr-3 ${isError ? 'bg-gradient-to-b from-red-500 to-red-600' : 'bg-gradient-to-b from-blue-500 to-purple-500'}`} />
                  {paragraph.replace('## ', '')}
                </h2>
              );
            } else if (paragraph.startsWith('### ')) {
              return (
                <h3 key={idx} className="text-lg font-medium text-zinc-100 mb-2 mt-6 flex items-center">
                  <AlertCircle className={`w-4 h-4 mr-2 ${isError ? 'text-red-400' : 'text-blue-400'}`} />
                  {paragraph.replace('### ', '')}
                </h3>
              );
            } else if (paragraph.startsWith('- **')) {
              return (
                <div key={idx} className={`ml-4 mb-3 p-3 rounded-lg border-l-2 ${
                  isError 
                    ? 'bg-red-800/20 border-red-500/50' 
                    : 'bg-zinc-800/30 border-blue-500/50'
                }`}>
                  <div className="font-medium text-zinc-100 mb-1">
                    {paragraph.match(/\*\*(.*?)\*\*/)?.[1] || ''}
                  </div>
                  <div className="text-zinc-300 text-sm leading-relaxed">
                    {paragraph.replace(/- \*\*(.*?)\*\*:\s*/, '')}
                  </div>
                </div>
              );
            }
            return (
              <p key={idx} className="text-zinc-200 leading-relaxed">
                {paragraph.split('**').map((part, i) => 
                  i % 2 === 1 ? 
                    <strong key={i} className="font-semibold text-zinc-100 bg-zinc-800/40 px-1 rounded">{part}</strong> : 
                    part
                )}
              </p>
            );
          })}
        </div>
      </div>

      {sources && sources.length > 0 && (
        <div className="mt-8 pt-6 border-t border-zinc-800/50">
          <div className="flex items-center justify-between mb-4">
            <h4 className="text-sm font-semibold text-zinc-300 flex items-center">
              <Search className="w-4 h-4 mr-2 text-blue-400" />
              Research Sources ({sources.length})
            </h4>
            <span className="bg-green-500/20 text-green-300 border border-green-500/30 px-2 py-1 rounded-full text-xs flex items-center">
              <div className="w-1.5 h-1.5 bg-green-400 rounded-full mr-1" />
              Verified
            </span>
          </div>
          <div className="space-y-3">
            {sources.map((source, idx) => (
              <div key={idx} className="group/source p-4 bg-zinc-800/40 rounded-xl border border-zinc-700/40 hover:border-zinc-600/60 hover:bg-zinc-700/50 transition-all duration-200">
                <div className="flex items-start space-x-3">
                  <div className="w-2 h-2 bg-blue-400 rounded-full mt-2 flex-shrink-0" />
                  <div className="flex-1 min-w-0">
                    <h5 className="text-sm font-medium text-zinc-100 mb-1">
                      [{idx + 1}] {source.title}
                    </h5>
                    <a 
                      href={source.url} 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className="text-xs text-blue-400 hover:text-blue-300 transition-colors break-all"
                    >
                      {source.url}
                    </a>
                    <div className="flex items-center space-x-3 mt-2">
                      <span className="text-xs text-zinc-500">{source.domain}</span>
                      <span className="text-xs text-zinc-500 flex items-center">
                        <span className="text-zinc-600">•</span>
                        <span className="ml-2">{formatRelativeTime(timestamp)}</span>
                      </span>
                    </div>
                  </div>
                  <Button 
                    onClick={() => navigator.clipboard.writeText(source.url)}
                    className="h-8 w-8 p-0 opacity-0 group-hover/source:opacity-100 transition-opacity bg-transparent border-none text-zinc-400 hover:text-zinc-200"
                  >
                    <Copy className="w-3 h-3" />
                  </Button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: string;
  sources?: Array<{
    title: string;
    url: string;
    domain: string;
  }>;
  isError?: boolean;
}

export default function ResearchAgent() {
  const [message, setMessage] = useState('');
  const [researchDepth, setResearchDepth] = useState('3');
  const [selectedModel, setSelectedModel] = useState('deepseek-chat');
  const [isSending, setIsSending] = useState(false);
  const [isResearchInProgress, setIsResearchInProgress] = useState(false);
  const [researchProgress, setResearchProgress] = useState(0);
  const [researchStage, setResearchStage] = useState(1);
  const [messages, setMessages] = useState<Message[]>([]);
  const [currentResearchQuery, setCurrentResearchQuery] = useState('');
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const researchAPI = useRef(new ResearchAPI());

  // Auto-resize textarea
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
      textareaRef.current.style.height = textareaRef.current.scrollHeight + 'px';
    }
  }, [message]);

  // Cleanup function to reset state
  const cleanupResearchState = () => {
    setIsResearchInProgress(false);
    setResearchProgress(0);
    setResearchStage(1);
    setIsSending(false);
    setCurrentResearchQuery('');
  };

  // Simulate progress updates during research
  const simulateProgress = (onComplete: () => void, onError: (error: string) => void) => {
    let progress = 0;
    let stage = 1;
    
    const interval = setInterval(() => {
      progress += Math.random() * 8 + 2; // Increment by 2-10%
      
      if (progress >= 100) {
        progress = 100;
        clearInterval(interval);
        setTimeout(onComplete, 500);
      }
      
      // Update stage based on progress
      const newStage = Math.min(6, Math.ceil(progress / 16.66)); // 6 stages
      if (newStage !== stage) {
        stage = newStage;
        setResearchStage(stage);
      }
      
      setResearchProgress(progress);
    }, 300);

    return () => clearInterval(interval);
  };

  const handleSendMessage = async () => {
    if (!message.trim() || isSending || isResearchInProgress) return;

    console.log('🚀 Starting research:', message);

    // Add user message
    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user' as const,
      content: message,
      timestamp: new Date().toISOString()
    };
    setMessages(prev => [...prev, userMessage]);

    // Store the query before clearing message
    const queryText = message;

    // Clear message input immediately
    setMessage('');
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
    }

    // Set research state
    setIsSending(true);
    setIsResearchInProgress(true);
    setResearchProgress(0);
    setResearchStage(1);
    setCurrentResearchQuery(queryText);

    // Start progress simulation
    const cleanupProgress = simulateProgress(
      () => {
        // This will be called when research completes successfully
        console.log('✅ Research completed successfully');
      },
      (error) => {
        // This will be called if research fails
        console.log('❌ Research failed:', error);
        handleResearchError(error);
      }
    );

    try {
      // Perform actual research
      const result = await researchAPI.current.performMockResearch({
        query: queryText,
        depth: parseInt(researchDepth),
      });

      // Stop progress simulation
      cleanupProgress();

      // Add successful result
      const successMessage: Message = {
        id: Date.now().toString(),
        role: 'assistant' as const,
        content: result.report,
        timestamp: new Date().toISOString(),
        sources: result.sources
      };

      setMessages(prev => [...prev, successMessage]);
      cleanupResearchState();

    } catch (error) {
      // Stop progress simulation
      cleanupProgress();
      
      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
      console.error('Research failed:', error);
      handleResearchError(errorMessage);
    }
  };

  // Handle research failure (error)
  const handleResearchError = (errorMessage: string) => {
    console.log('❌ Research failed:', errorMessage);

    const errorMessageObj: Message = {
      id: Date.now().toString(),
      role: 'assistant' as const,
      content: `# Research Error Encountered

## Error Details
I encountered an error while performing research: **${errorMessage}**

## What Happened
- The research process was interrupted due to a system issue
- Your query was: "${currentResearchQuery}"

## Troubleshooting Steps
1. **Try again**: Click the research button to retry your query
2. **Simplify query**: Try a more focused or specific question
3. **Change depth**: Switch to "Quick" or "Standard" research mode
4. **Check connection**: Ensure you have a stable internet connection

## Alternative Approaches
- Break complex questions into smaller, specific queries
- Use different keywords or phrasing
- Try researching individual aspects of your topic separately

## Technical Details
- Error Type: ${errorMessage.includes('fetch') ? 'Network Error' : 'Service Error'}
- Timestamp: ${new Date().toLocaleString()}
- Depth Level: ${researchDepth === '3' ? 'Deep' : researchDepth === '2' ? 'Standard' : 'Quick'}

I'm ready to help with your research once you'd like to try again!`,
      timestamp: new Date().toISOString(),
      isError: true
    };

    setMessages(prev => [...prev, errorMessageObj]);
    cleanupResearchState();
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleNewResearch = () => {
    console.log('🔄 Starting new research session');
    cleanupResearchState();
    setMessages([]);
    setMessage('');
  };

  const predefinedPrompts = [
    {
      title: "Market Analysis",
      description: "Deep dive into market trends",
      prompt: "Analyze current market trends for EUR/USD including technical and fundamental factors",
      icon: TrendingUp,
      gradient: "from-emerald-500 to-teal-600"
    },
    {
      title: "Financial Data",
      description: "Comprehensive metrics analysis",
      prompt: "Generate comprehensive financial analysis report for cryptocurrency market trends",
      icon: Database,
      gradient: "from-blue-500 to-indigo-600"
    },
    {
      title: "Technology Research",
      description: "Latest tech developments",
      prompt: "Research latest developments in artificial intelligence and machine learning",
      icon: Zap,
      gradient: "from-purple-500 to-pink-600"
    },
    {
      title: "Industry Insights",
      description: "Business intelligence",
      prompt: "Analyze renewable energy industry trends and investment opportunities",
      icon: FileText,
      gradient: "from-orange-500 to-red-600"
    }
  ];

  return (
    <div className="flex h-screen bg-gradient-to-br from-zinc-950 via-zinc-900 to-zinc-950">
      <div className="w-64 border-r border-zinc-800/60 bg-zinc-950/80 backdrop-blur-xl">
        <div className="p-4 border-b border-zinc-800/60">
          <Button onClick={handleNewResearch} className="w-full">
            <Plus className="w-4 h-4 mr-2" />
            New Research
          </Button>
        </div>
        
        <div className="p-4">
          <h3 className="text-sm font-semibold text-zinc-300 mb-3">Research Depth</h3>
          <div className="space-y-2 text-xs text-zinc-400">
            <div className="flex items-center space-x-2">
              <div className="w-2 h-2 bg-green-400 rounded-full" />
              <span>Quick: Basic web search</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-2 h-2 bg-blue-400 rounded-full" />
              <span>Standard: Enhanced analysis</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-2 h-2 bg-purple-400 rounded-full" />
              <span>Deep: Comprehensive research</span>
            </div>
          </div>
        </div>
      </div>

      <div className="flex-1 flex flex-col">
        <div className="flex-1 overflow-y-auto p-6">
          {messages.length === 0 && !isResearchInProgress && (
            <div className="flex-1 flex items-center justify-center min-h-[60vh]">
              <div className="text-center max-w-4xl mx-auto px-8">
                <div className="w-16 h-16 bg-gradient-to-br from-blue-600 to-purple-700 rounded-2xl flex items-center justify-center mx-auto mb-6 shadow-2xl">
                  <Bot className="w-8 h-8 text-white" />
                </div>

                <h1 className="text-3xl font-bold text-zinc-100 mb-3">
                  Welcome to Research Agent
                </h1>
                <p className="text-lg text-zinc-400 mb-12">
                  Get comprehensive, AI-powered research on any topic with real-time data
                </p>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 max-w-4xl mx-auto">
                  {predefinedPrompts.map((card, idx) => (
                    <div
                      key={idx}
                      onClick={() => setMessage(card.prompt)}
                      className="group p-6 bg-zinc-900/60 backdrop-blur-sm border border-zinc-800/50 rounded-2xl hover:bg-zinc-800/70 hover:border-zinc-700/70 transition-all duration-300 cursor-pointer transform hover:scale-[1.02] hover:shadow-2xl"
                    >
                      <div className={`w-12 h-12 bg-gradient-to-br ${card.gradient} rounded-xl flex items-center justify-center mb-4 shadow-lg`}>
                        <card.icon className="w-6 h-6 text-white" />
                      </div>

                      <h3 className="text-lg font-semibold text-zinc-100 mb-2 group-hover:text-white transition-colors">
                        {card.title}
                      </h3>
                      <p className="text-sm text-zinc-400 group-hover:text-zinc-300 transition-colors">
                        {card.description}
                      </p>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {messages.map((msg) => (
            <div key={msg.id} className="mb-4">
              <div className="flex items-start space-x-3">
                <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
                  msg.role === 'user' ? 'bg-blue-600' : msg.isError ? 'bg-red-600' : 'bg-purple-600'
                }`}>
                  {msg.role === 'user' ? <User className="w-5 h-5 text-white" /> : 
                   msg.isError ? <AlertCircle className="w-5 h-5 text-white" /> : 
                   <Bot className="w-5 h-5 text-white" />}
                </div>
                <div className="flex-1">
                  {msg.role === 'user' ? (
                    <div className="bg-zinc-900/60 backdrop-blur-sm border border-zinc-800/50 p-6 rounded-xl">
                      <div className="prose prose-invert max-w-none">
                        {msg.content}
                      </div>
                    </div>
                  ) : (
                    <ResearchResponse 
                      content={msg.content}
                      timestamp={msg.timestamp}
                      sources={msg.sources}
                      isError={msg.isError}
                    />
                  )}
                </div>
              </div>
            </div>
          ))}

          {isResearchInProgress && (
            <div className="mb-4">
              <ResearchProgress 
                stage={researchStage}
                progress={researchProgress}
                query={currentResearchQuery || "Analyzing..."}
                isActive={true}
              />
            </div>
          )}
        </div>

        <div className="border-t border-zinc-800/60 bg-zinc-900/80 backdrop-blur-xl p-4">
          <div className="max-w-4xl mx-auto">
            <div className="flex items-center space-x-4 mb-4">
              <Select value={researchDepth} onValueChange={setResearchDepth} />
              <Select value={selectedModel} onValueChange={setSelectedModel} />
            </div>

            <div className="relative">
              <Textarea
                textareaRef={textareaRef}
                value={message}
                onChange={(e: any) => setMessage(e.target.value)}
                onKeyDown={handleKeyDown}
                placeholder="Ask a research question..."
                className="min-h-[100px] pr-24"
                rows={1}
              />
              <Button
                onClick={handleSendMessage}
                disabled={!message.trim() || isSending || isResearchInProgress}
                className="absolute bottom-4 right-4"
              >
                {isSending ? (
                  <Loader2 className="w-4 h-4 animate-spin" />
                ) : (
                  <Send className="w-4 h-4" />
                )}
              </Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}