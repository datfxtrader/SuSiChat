// Add this debug component to test table formatting
// You can temporarily add this to your research-agent page to see what's happening

import React, { useState } from 'react';

const TableDebugger: React.FC = () => {
  const [testContent, setTestContent] = useState(`
# Market Analysis

Current market conditions show the following key metrics:

| Metric | Current Value | Change |
|--------|---------------|--------|
| Price | $45,234 | +2.3% |
| Volume | 1.2M | -5.1% |
| Market Cap | $890B | +1.8% |

And here's another table without separators:

| Support Level | Price | Strength |
| S1 | $44,800 | Strong |
| S2 | $44,200 | Moderate |
| S3 | $43,500 | Weak |

Technical indicators:

| Indicator | Value | Signal |
| RSI | 65.2 | Neutral |
| MACD | 0.125 | Bullish |
| SMA 20 | $44,950 | Support |
  `);

  const processContent = (content: string) => {
    // Your existing processing function
    let processed = content;
    
    // Debug: Log what we're working with
    console.log('üîç ORIGINAL CONTENT:');
    console.log(content);
    
    // Find all pipe-separated content
    const pipeLines = content.split('\n').filter(line => line.includes('|'));
    console.log('üîç LINES WITH PIPES:', pipeLines);
    
    // Pattern 1: Standard markdown tables
    processed = processed.replace(
      /(\|[^\n]+\|\s*\n\|[-:\s|]+\|\s*\n(?:\|[^\n]+\|\s*\n?)+)/g,
      (match) => {
        console.log('üéØ FOUND STANDARD TABLE:', match);
        return convertTableToHtml(match, 'standard');
      }
    );
    
    // Pattern 2: Tables without separators
    processed = processed.replace(
      /((?:^\|[^\n]+\|\s*$\n?){3,})/gm,
      (match) => {
        if (match.includes('<table')) return match;
        console.log('üéØ FOUND NO-SEPARATOR TABLE:', match);
        return convertTableToHtml(match, 'no-separator');
      }
    );
    
    return processed;
  };
  
  const convertTableToHtml = (tableText: string, type: string): string => {
    console.log(`üîß CONVERTING ${type.toUpperCase()} TABLE:`, tableText);
    
    const lines = tableText.split('\n')
      .map(line => line.trim())
      .filter(line => line.length > 0 && line.includes('|'));
    
    console.log('üìù TABLE LINES:', lines);
    
    if (lines.length < 2) return tableText;
    
    // Parse header and data
    let headerRow, dataRows;
    
    if (type === 'standard') {
      headerRow = lines[0];
      dataRows = lines.slice(2); // Skip separator
    } else {
      headerRow = lines[0];
      dataRows = lines.slice(1);
    }
    
    console.log('üìã HEADER ROW:', headerRow);
    console.log('üìã DATA ROWS:', dataRows);
    
    // Parse cells
    const parseRow = (row: string) => {
      return row.replace(/^\||\|$/g, '').split('|').map(cell => cell.trim());
    };
    
    const headers = parseRow(headerRow);
    const data = dataRows.map(parseRow);
    
    console.log('üè∑Ô∏è HEADERS:', headers);
    console.log('üìä DATA:', data);
    
    // Generate HTML
    const headerHtml = headers.map(h => `<th class="px-4 py-2 bg-slate-700 text-white font-bold">${h}</th>`).join('');
    const dataHtml = data.map(row => {
      const cells = row.map((cell, i) => {
        const align = i === 0 ? 'text-left' : 'text-center';
        return `<td class="px-4 py-2 border-b border-slate-600 ${align}">${cell}</td>`;
      }).join('');
      return `<tr>${cells}</tr>`;
    }).join('');
    
    return `
    <div class="my-6 overflow-x-auto">
      <table class="w-full bg-slate-800 rounded-lg border border-slate-600">
        <thead><tr>${headerHtml}</tr></thead>
        <tbody class="text-gray-300">${dataHtml}</tbody>
      </table>
    </div>`;
  };

  const processedContent = processContent(testContent);

  return (
    <div className="max-w-4xl mx-auto p-6 bg-slate-900 text-white">
      <h2 className="text-2xl font-bold mb-6">Table Formatting Debug Tool</h2>
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Input */}
        <div>
          <h3 className="text-lg font-semibold mb-3">Raw Content</h3>
          <textarea
            value={testContent}
            onChange={(e) => setTestContent(e.target.value)}
            className="w-full h-80 p-4 bg-slate-800 border border-slate-600 rounded-lg text-sm font-mono"
            placeholder="Paste your table content here..."
          />
        </div>
        
        {/* Output */}
        <div>
          <h3 className="text-lg font-semibold mb-3">Processed Output</h3>
          <div 
            className="h-80 p-4 bg-slate-800 border border-slate-600 rounded-lg overflow-auto"
            dangerouslySetInnerHTML={{ __html: processedContent }}
          />
        </div>
      </div>
      
      {/* Debug Info */}
      <div className="mt-6 p-4 bg-slate-800 rounded-lg">
        <h4 className="font-semibold mb-2">Debug Information</h4>
        <div className="text-sm text-gray-400 space-y-1">
          <div>Lines with pipes: {testContent.split('\n').filter(line => line.includes('|')).length}</div>
          <div>Potential tables detected: {(testContent.match(/\|[^\n]+\|/g) || []).length > 0 ? 'Yes' : 'No'}</div>
          <div>Contains separators: {testContent.includes('---') || testContent.includes('===') ? 'Yes' : 'No'}</div>
        </div>
      </div>
    </div>
  );
};

export default TableDebugger;