import React, { useState, useRef, useEffect, useCallback, useMemo } from 'react';
import { Bot, Send, Sparkles, Database, Search, FileText, Settings, Zap, Loader2, MessageSquare, User, TrendingUp, AlertCircle, Copy, Share2, Bookmark, Plus, Menu, X, Clock, CheckCircle } from 'lucide-react';

// ============================================
// CONSTANTS
// ============================================
const RESEARCH_TIMEOUT = 120000; // 2 minutes
const PROGRESS_INTERVAL = 1800;
const COMPLETION_DELAY = 3000;
const TYPEWRITER_SPEED = 30; // ms per character

const PREDEFINED_PROMPTS = [
  {
    title: "Market Analysis",
    description: "Deep dive into market trends",
    prompt: "Analyze current market trends",
    icon: TrendingUp,
    gradient: "from-emerald-500 to-teal-600"
  },
  {
    title: "Financial Data",
    description: "Comprehensive metrics analysis",
    prompt: "Generate financial analysis",
    icon: Database,
    gradient: "from-blue-500 to-indigo-600"
  }
];

const STAGE_MESSAGES = [
  "Initializing research...",
  "Searching databases...",
  "Analyzing sources...",
  "Cross-referencing data...",
  "Synthesizing insights...",
  "Finalizing report..."
];

// ============================================
// UTILITY FUNCTIONS
// ============================================
const formatRelativeTime = (timestamp: string) => {
  const now = new Date();
  const messageTime = new Date(timestamp);
  const diffInMinutes = Math.floor((now.getTime() - messageTime.getTime()) / (1000 * 60));

  if (diffInMinutes < 1) return 'Just now';
  if (diffInMinutes < 60) return `${diffInMinutes}m ago`;
  if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;
  return `${Math.floor(diffInMinutes / 1440)}d ago`;
};

// ============================================
// UI COMPONENTS
// ============================================
interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'default' | 'ghost';
  size?: 'default' | 'sm';
  children: React.ReactNode;
  className?: string;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className = '', variant = 'default', size = 'default', children, disabled, ...props }, ref) => {
    const variants = {
      default: 'bg-zinc-100 text-zinc-900 hover:bg-zinc-200',
      ghost: 'bg-transparent hover:bg-zinc-800/60 text-zinc-400 hover:text-zinc-200'
    };
    
    const sizes = {
      default: 'h-10 px-4 py-2',
      sm: 'h-7 px-2 py-1 text-xs'
    };
    
    return (
      <button
        ref={ref}
        className={`inline-flex items-center justify-center rounded-md font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 ${variants[variant]} ${sizes[size]} ${className}`}
        disabled={disabled}
        {...props}
      >
        {children}
      </button>
    );
  }
);

interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {
  className?: string;
}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className = '', ...props }, ref) => {
    return (
      <textarea
        ref={ref}
        className={`flex w-full rounded-md border border-zinc-700 bg-zinc-800 px-3 py-2 text-sm text-zinc-100 placeholder:text-zinc-400 focus:outline-none focus:ring-2 focus:ring-zinc-400 focus:ring-offset-2 focus:ring-offset-zinc-900 disabled:cursor-not-allowed disabled:opacity-50 resize-none ${className}`}
        {...props}
      />
    );
  }
);

const Badge = ({ children, className = '' }: { children: React.ReactNode; className?: string }) => (
  <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs ${className}`}>
    {children}
  </span>
);

// ============================================
// TYPEWRITER COMPONENT
// ============================================
interface TypewriterTextProps {
  text: string;
  speed?: number;
  onComplete?: () => void;
  className?: string;
}

const TypewriterText: React.FC<TypewriterTextProps> = ({ 
  text, 
  speed = TYPEWRITER_SPEED, 
  onComplete,
  className = ''
}) => {
  const [displayText, setDisplayText] = useState('');
  const [currentIndex, setCurrentIndex] = useState(0);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    if (currentIndex < text.length) {
      intervalRef.current = setTimeout(() => {
        setDisplayText(prev => prev + text[currentIndex]);
        setCurrentIndex(prev => prev + 1);
      }, speed);
    } else if (onComplete) {
      onComplete();
    }

    return () => {
      if (intervalRef.current) clearTimeout(intervalRef.current);
    };
  }, [currentIndex, text, speed, onComplete]);

  // Reset when text changes
  useEffect(() => {
    setDisplayText('');
    setCurrentIndex(0);
  }, [text]);

  return <div className={className}>{renderContent(displayText)}</div>;
};

// ============================================
// RESEARCH PROGRESS COMPONENT
// ============================================
interface ResearchProgressProps {
  stage: number;
  progress: number;
  query: string;
  isActive: boolean;
}

const ResearchProgress = React.memo<ResearchProgressProps>(({ stage, progress, query, isActive }) => {
  const stageMessage = useMemo(() => STAGE_MESSAGES[Math.min(stage - 1, STAGE_MESSAGES.length - 1)], [stage]);
  
  return (
    <div className="bg-zinc-900/70 border border-zinc-700/50 rounded-xl p-6 backdrop-blur-sm">
      <div className="flex items-center space-x-3 mb-4">
        <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center shadow-lg">
          <Search className="w-4 h-4 text-white animate-pulse" />
        </div>
        <div className="flex-1">
          <h3 className="text-sm font-semibold text-zinc-100">Researching...</h3>
          <p className="text-xs text-zinc-400 truncate">{query}</p>
        </div>
      </div>
      
      <div className="space-y-3">
        <div className="flex justify-between items-center">
          <span className="text-xs text-blue-400 font-medium">Stage {stage}/6</span>
          <span className="text-xs text-zinc-400">{Math.round(progress)}%</span>
        </div>
        
        <div className="w-full bg-zinc-800/50 rounded-full h-2 overflow-hidden relative">
          <div 
            className="h-full bg-gradient-to-r from-blue-500 via-purple-500 to-cyan-400 rounded-full transition-all duration-1000 ease-out relative"
            style={{ width: `${Math.max(progress, 5)}%` }}
          >
            <div className="absolute inset-0 bg-white/20 animate-pulse" />
          </div>
        </div>
        
        {isActive && (
          <div className="flex items-center space-x-2 text-xs text-blue-400">
            <div className="w-1.5 h-1.5 bg-blue-400 rounded-full animate-pulse" />
            <span className="animate-fade-in">{stageMessage}</span>
          </div>
        )}
      </div>
    </div>
  );
});

// ============================================
// CONTENT RENDERER
// ============================================
const renderContent = (content: string) => {
  return content.split('\n\n').map((paragraph, idx) => {
    // Table rendering
    if (paragraph.includes('|') && paragraph.split('|').length > 2) {
      const lines = paragraph.split('\n').filter(line => line.trim());
      const tableLines = lines.filter(line => line.includes('|') && line.split('|').length > 2);
      
      if (tableLines.length >= 2) {
        const contentLines = tableLines.filter(line => !line.match(/^\s*\|[\s\-|]+\|\s*$/));
        
        if (contentLines.length >= 2) {
          const [headerLine, ...dataLines] = contentLines;
          const headers = headerLine.split('|').map(h => h.trim()).filter(h => h);
          const rows = dataLines.map(line => 
            line.split('|').map(cell => cell.trim()).filter(cell => cell)
          );
          
          return (
            <div key={idx} className="my-6 overflow-x-auto rounded-xl shadow-xl">
              <table className="w-full border-collapse bg-zinc-800/40 overflow-hidden">
                <thead>
                  <tr className="bg-gradient-to-r from-blue-600/20 to-purple-600/20 border-b-2 border-blue-500/30">
                    {headers.map((header, i) => (
                      <th key={i} className="px-6 py-4 text-left text-zinc-100 font-semibold text-sm uppercase tracking-wide">
                        {header}
                      </th>
                    ))}
                  </tr>
                </thead>
                <tbody>
                  {rows.map((row, i) => (
                    <tr key={i} className="border-b border-zinc-700/30 hover:bg-zinc-700/30 transition-colors">
                      {row.map((cell, j) => (
                        <td key={j} className="px-6 py-4 text-zinc-300 font-mono text-sm">
                          {cell}
                        </td>
                      ))}
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          );
        }
      }
    }
    
    // Numbered list rendering
    if (/^\d+\.\s/.test(paragraph.trim())) {
      const lines = paragraph.split('\n').filter(line => line.trim());
      const listItems = [];
      let currentItem = '';
      
      for (const line of lines) {
        if (/^\d+\.\s/.test(line.trim())) {
          if (currentItem) listItems.push(currentItem);
          currentItem = line.trim();
        } else {
          currentItem += ' ' + line.trim();
        }
      }
      if (currentItem) listItems.push(currentItem);
      
      return (
        <ol key={idx} className="list-none space-y-4 ml-0">
          {listItems.map((item, i) => {
            const match = item.match(/^(\d+)\.\s*(.+)/);
            if (match) {
              const [, number, text] = match;
              const boldMatch = text.match(/^(.+?):\s*(.+)/);
              
              return (
                <li key={i} className="flex items-start space-x-4 p-4 bg-zinc-800/30 rounded-lg border-l-4 border-blue-500/60 hover:bg-zinc-800/40 transition-colors">
                  <span className="flex-shrink-0 w-8 h-8 bg-gradient-to-br from-blue-600 to-blue-700 text-white text-sm font-bold rounded-full flex items-center justify-center shadow-md">
                    {number}
                  </span>
                  <div className="flex-1 space-y-2">
                    {boldMatch ? (
                      <>
                        <div className="font-semibold text-zinc-100 text-base">{boldMatch[1]}</div>
                        <div className="text-zinc-300 leading-relaxed">{boldMatch[2]}</div>
                      </>
                    ) : (
                      <div className="text-zinc-300 leading-relaxed">{text}</div>
                    )}
                  </div>
                </li>
              );
            }
            return null;
          })}
        </ol>
      );
    }
    
    // Headers
    if (paragraph.startsWith('# ')) {
      return (
        <h1 key={idx} className="text-2xl font-bold text-zinc-100 mb-4 pb-3 border-b border-zinc-700/50 flex items-center">
          <TrendingUp className="w-6 h-6 mr-3 text-blue-400" />
          {paragraph.replace('# ', '')}
        </h1>
      );
    } else if (paragraph.startsWith('## ')) {
      return (
        <h2 key={idx} className="text-xl font-semibold text-zinc-100 mb-3 mt-8 flex items-center">
          <div className="w-1 h-6 bg-gradient-to-b from-blue-500 to-purple-500 rounded-full mr-3" />
          {paragraph.replace('## ', '')}
        </h2>
      );
    } else if (paragraph.startsWith('### ')) {
      return (
        <h3 key={idx} className="text-lg font-medium text-zinc-100 mb-2 mt-6 flex items-center">
          <AlertCircle className="w-4 h-4 mr-2 text-blue-400" />
          {paragraph.replace('### ', '')}
        </h3>
      );
    }
    
    // Bullet points with bold
    if (paragraph.startsWith('- **') || paragraph.match(/^\s*[-*•]\s*\*\*/)) {
      const titleMatch = paragraph.match(/\*\*(.*?)\*\*/);
      return (
        <div key={idx} className="mb-3 p-4 bg-zinc-800/30 rounded-lg border-l-3 border-blue-500/50 hover:bg-zinc-800/40 transition-colors">
          <div className="font-medium text-zinc-100 mb-2">
            {titleMatch?.[1] || ''}
          </div>
          <div className="text-zinc-300 leading-relaxed">
            {paragraph.replace(/^[\s\-*•]*\*\*(.*?)\*\*:\s*/, '')}
          </div>
        </div>
      );
    }
    
    // Regular bullet points
    if (paragraph.match(/^[\s]*[-*•]\s+/)) {
      const bulletText = paragraph.replace(/^[\s\-*•]+/, '').trim();
      return (
        <div key={idx} className="flex items-start space-x-3 mb-2">
          <div className="w-2 h-2 bg-blue-400 rounded-full mt-2 flex-shrink-0" />
          <div className="text-zinc-300 leading-relaxed flex-1">
            {formatText(bulletText)}
          </div>
        </div>
      );
    }
    
    // Regular paragraphs
    return (
      <p key={idx} className="text-zinc-200 leading-relaxed">
        {formatText(paragraph)}
      </p>
    );
  });
};

const formatText = (text: string) => {
  return text.split('**').map((part, i) => 
    i % 2 === 1 ? 
      <strong key={i} className="font-semibold text-zinc-100 bg-zinc-800/40 px-1 rounded">{part}</strong> : 
      part
  );
};

// ============================================
// RESEARCH RESPONSE COMPONENT
// ============================================
interface Source {
  title: string;
  url: string;
  domain: string;
}

interface ResearchResponseProps {
  content: string;
  timestamp: string;
  sources?: Source[];
  isLatest?: boolean;
}

const ResearchResponse = React.memo<ResearchResponseProps>(({ 
  content, 
  timestamp, 
  sources, 
  isLatest = false 
}) => {
  const [copySuccess, setCopySuccess] = useState('');
  const [typewriterComplete, setTypewriterComplete] = useState(!isLatest);
  const [showSources, setShowSources] = useState(false);

  const handleCopy = useCallback(() => {
    navigator.clipboard.writeText(content);
    setCopySuccess('Copied!');
    setTimeout(() => setCopySuccess(''), 2000);
  }, [content]);

  const handleTypewriterComplete = useCallback(() => {
    setTypewriterComplete(true);
    setShowSources(true);
  }, []);

  useEffect(() => {
    if (isLatest && content && content.length > 0) {
      setTypewriterComplete(false);
      setShowSources(false);
    } else {
      setTypewriterComplete(true);
      setShowSources(true);
    }
  }, [isLatest, content]);

  const contentLength = useMemo(() => content.length, [content]);
  const estimatedReadTime = useMemo(() => Math.ceil(contentLength / 1000), [contentLength]);

  return (
    <div className="group bg-zinc-900/60 backdrop-blur-sm border border-zinc-800/50 p-6 rounded-2xl hover:border-zinc-700/60 transition-all duration-200 shadow-lg">
      <div className="flex items-center justify-between mb-5 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
        <div className="flex items-center space-x-3 text-xs text-zinc-400">
          <div className="flex items-center space-x-1">
            <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse" />
            <span>AI Research Assistant</span>
          </div>
          <span>•</span>
          <span>{formatRelativeTime(timestamp)}</span>
          <span>•</span>
          <span>{estimatedReadTime} min read</span>
        </div>
        <div className="flex items-center space-x-1">
          <Button 
            onClick={handleCopy} 
            variant="ghost" 
            size="sm" 
            className="h-7 w-7 p-0"
          >
            {copySuccess ? <CheckCircle className="w-3 h-3 text-green-400" /> : <Copy className="w-3 h-3" />}
          </Button>
          <Button variant="ghost" size="sm" className="h-7 w-7 p-0">
            <Share2 className="w-3 h-3" />
          </Button>
          <Button variant="ghost" size="sm" className="h-7 w-7 p-0">
            <Bookmark className="w-3 h-3" />
          </Button>
        </div>
      </div>

      <div className="prose prose-invert max-w-none">
        {isLatest && !typewriterComplete ? (
          <TypewriterText
            text={content}
            speed={TYPEWRITER_SPEED}
            onComplete={handleTypewriterComplete}
            className="space-y-6 text-zinc-200"
          />
        ) : (
          <div className="space-y-6 text-zinc-200 animate-fade-in">
            {renderContent(content)}
          </div>
        )}
      </div>

      {sources && sources.length > 0 && showSources && (
        <div className="mt-8 pt-6 border-t border-zinc-800/50 animate-slide-up">
          <div className="flex items-center justify-between mb-4">
            <h4 className="text-sm font-semibold text-zinc-300 flex items-center">
              <Search className="w-4 h-4 mr-2 text-blue-400" />
              Research Sources ({sources.length})
            </h4>
            <Badge className="bg-green-500/20 text-green-300 border border-green-500/30">
              <div className="w-1.5 h-1.5 bg-green-400 rounded-full mr-1 animate-pulse" />
              Verified
            </Badge>
          </div>
          <div className="grid gap-3">
            {sources.map((source, idx) => (
              <SourceItem key={idx} source={source} index={idx} timestamp={timestamp} />
            ))}
          </div>
        </div>
      )}
    </div>
  );
});

// ============================================
// SOURCE ITEM COMPONENT
// ============================================
const SourceItem = React.memo(({ source, index, timestamp }: { 
  source: Source; 
  index: number; 
  timestamp: string; 
}) => {
  const [copied, setCopied] = useState(false);
  
  const handleCopyUrl = useCallback(() => {
    navigator.clipboard.writeText(source.url);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  }, [source.url]);

  return (
    <div className="group/source flex items-start space-x-3 p-4 bg-zinc-800/40 rounded-xl border border-zinc-700/40 hover:border-zinc-600/60 hover:bg-zinc-700/50 transition-all duration-200">
      <div className="w-2 h-2 bg-blue-400 rounded-full mt-2 flex-shrink-0" />
      <div className="flex-1 min-w-0">
        <a 
          href={source.url} 
          target="_blank" 
          rel="noopener noreferrer"
          className="text-zinc-200 hover:text-blue-400 cursor-pointer transition-colors font-medium text-sm block mb-1"
        >
          [{index + 1}] {source.title}
        </a>
        <div className="flex items-center space-x-3 text-xs text-zinc-500">
          <span>{source.domain}</span>
          <span className="flex items-center">
            <Clock className="w-3 h-3 mr-1" />
            {formatRelativeTime(timestamp)}
          </span>
        </div>
      </div>
      <Button 
        variant="ghost" 
        size="sm" 
        className="h-8 w-8 p-0 opacity-0 group-hover/source:opacity-100 transition-opacity"
        onClick={handleCopyUrl}
      >
        {copied ? <CheckCircle className="w-3 h-3 text-green-400" /> : <Copy className="w-3 h-3" />}
      </Button>
    </div>
  );
});

// ============================================
// SELECT COMPONENT
// ============================================
const Select = React.memo(({ value, onValueChange }: { 
  value: string; 
  onValueChange: (value: string) => void; 
}) => {
  const [isOpen, setIsOpen] = useState(false);
  
  const options = useMemo(() => [
    { value: '1', label: 'Quick (25K)', icon: Zap, color: 'text-yellow-400' },
    { value: '2', label: 'Standard (25K)', icon: Search, color: 'text-blue-400' },
    { value: '3', label: 'Deep (25K)', icon: Database, color: 'text-purple-400' }
  ], []);

  const selectedOption = useMemo(() => 
    options.find(opt => opt.value === value) || options[2]
  , [value, options]);

  return (
    <div className="relative">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="px-4 py-2 bg-zinc-800/50 border border-zinc-700/50 rounded-lg text-zinc-100 flex items-center space-x-2 hover:bg-zinc-800/70 transition-colors"
      >
        <selectedOption.icon className={`w-4 h-4 ${selectedOption.color}`} />
        <span>{selectedOption.label}</span>
      </button>
      {isOpen && (
        <div className="absolute top-full mt-1 w-full bg-zinc-800 border border-zinc-700 rounded-lg shadow-xl z-10 overflow-hidden">
          {options.map(option => (
            <div 
              key={option.value}
              onClick={() => { onValueChange(option.value); setIsOpen(false); }} 
              className="px-4 py-3 hover:bg-zinc-700 cursor-pointer flex items-center space-x-2 transition-colors"
            >
              <option.icon className={`w-4 h-4 ${option.color}`} />
              <span>{option.label}</span>
            </div>
          ))}
        </div>
      )}
    </div>
  );
});

// ============================================
// MAIN COMPONENT DEMO
// ============================================
export default function ResearchUIDemo() {
  const [progress, setProgress] = useState(0);
  const [stage, setStage] = useState(1);
  const [isActive, setIsActive] = useState(true);

  // Simulate progress
  useEffect(() => {
    const interval = setInterval(() => {
      setProgress(prev => {
        const newProgress = Math.min(prev + Math.random() * 2, 100);
        setStage(Math.ceil(newProgress / 16.67)); // 100/6 stages
        if (newProgress >= 100) {
          setIsActive(false);
          clearInterval(interval);
        }
        return newProgress;
      });
    }, 500);

    return () => clearInterval(interval);
  }, []);

  const sampleContent = `# Market Analysis Report

## Executive Summary

The current market landscape presents **significant opportunities** for growth in the technology sector, particularly in AI and machine learning applications.

### Key Findings

1. **Market Growth**: The AI market is projected to reach $1.8 trillion by 2030
   • Annual growth rate of 38.1%
   • Increased enterprise adoption
   • Expanding use cases across industries

2. **Investment Trends**: Venture capital funding has increased by 45% year-over-year
   • Focus on generative AI startups
   • Enterprise AI solutions gaining traction
   • Healthcare AI seeing significant investment

| Sector | Growth Rate | Investment (B) |
|--------|------------|----------------|
| Healthcare AI | 41.2% | $21.3 |
| FinTech AI | 38.5% | $18.7 |
| Retail AI | 35.1% | $15.2 |

## Market Opportunities

- **Enterprise Automation**: Companies are increasingly adopting AI for process automation
- **Healthcare Innovation**: AI-driven diagnostics and treatment planning
- **Financial Services**: Risk assessment and fraud detection improvements

### Recommendations

Based on our analysis, we recommend focusing on:

1. **Strategic Partnerships**: Collaborate with established enterprise players
2. **Product Development**: Invest in vertical-specific AI solutions
3. **Market Positioning**: Target mid-market enterprises with scalable solutions`;

  const sampleSources = [
    { title: "AI Market Growth Analysis 2024", url: "https://example.com/ai-analysis", domain: "techresearch.com" },
    { title: "Global Investment Trends Report", url: "https://example.com/investment", domain: "marketwatch.com" },
    { title: "Enterprise AI Adoption Study", url: "https://example.com/enterprise", domain: "gartner.com" }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-zinc-950 via-zinc-900 to-zinc-950 p-8">
      <div className="max-w-4xl mx-auto space-y-8">
        <h1 className="text-3xl font-bold text-zinc-100 mb-8">Enhanced Research UI Components</h1>
        
        {/* Research Progress Demo */}
        <div className="space-y-4">
          <h2 className="text-xl font-semibold text-zinc-200">Research Progress Component</h2>
          <ResearchProgress
            stage={stage}
            progress={progress}
            query="Analyze current market trends in AI and machine learning"
            isActive={isActive}
          />
        </div>

        {/* Research Response Demo */}
        <div className="space-y-4">
          <h2 className="text-xl font-semibold text-zinc-200">Research Response Component</h2>
          <ResearchResponse
            content={sampleContent}
            timestamp={new Date().toISOString()}
            sources={sampleSources}
            isLatest={true}
          />
        </div>

        {/* Select Component Demo */}
        <div className="space-y-4">
          <h2 className="text-xl font-semibold text-zinc-200">Select Component</h2>
          <div className="flex space-x-4">
            <Select value="3" onValueChange={(v) => console.log('Depth:', v)} />
            <Select value="2" onValueChange={(v) => console.log('Model:', v)} />
          </div>
        </div>
      </div>
    </div>
  );
}