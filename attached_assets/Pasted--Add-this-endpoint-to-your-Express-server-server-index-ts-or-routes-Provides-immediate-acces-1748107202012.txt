// Add this endpoint to your Express server (server/index.ts or routes)
// Provides immediate access to research results via memory cache

app.get('/api/research/results/:conversationId', async (req, res) => {
  try {
    const { conversationId } = req.params;
    console.log('🔍 API: Retrieving results for conversation:', conversationId);
    
    const results = await getResearchResultsSafely(conversationId);
    
    if (results.success) {
      res.json({
        success: true,
        data: results.results,
        source: results.source,
        timestamp: results.timestamp,
        query: results.query || 'Research query'
      });
    } else {
      res.status(404).json({
        success: false,
        message: 'Results not found',
        conversationId
      });
    }
    
  } catch (error) {
    console.error('❌ API: Error retrieving results:', error);
    res.status(500).json({
      success: false,
      message: 'Server error retrieving results',
      error: error.message
    });
  }
});

// Debug endpoint to see all cached results
app.get('/api/research/cache/stats', (req, res) => {
  try {
    const stats = getMemoryCacheStats();
    res.json({
      success: true,
      ...stats
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Frontend integration - add this to your React component
const fetchResearchResults = async (conversationId: string) => {
  try {
    console.log('🔍 Fetching results for conversation:', conversationId);
    
    const response = await fetch(`/api/research/results/${conversationId}`);
    const data = await response.json();
    
    if (data.success) {
      console.log('✅ Results retrieved successfully:', data.source);
      return data.data;
    } else {
      console.log('❌ No results found');
      return null;
    }
  } catch (error) {
    console.error('❌ Error fetching results:', error);
    return null;
  }
};

// Use in your React component after research completion
useEffect(() => {
  if (!isResearchInProgress && state.progress >= 100 && currentConversation?.id) {
    console.log('✅ Research completed, fetching results...');
    
    // Small delay to ensure results are cached
    setTimeout(async () => {
      const results = await fetchResearchResults(currentConversation.id);
      if (results) {
        console.log('🎉 Research results loaded!');
        // Display results in your UI
        setDisplayResults(results);
      }
    }, 2000);
  }
}, [isResearchInProgress, state.progress, currentConversation?.id]);