<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tab Persistence Debugger</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: white;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 25px 45px rgba(0, 0, 0, 0.1);
        }
        
        .header {
            text-align: center;
            margin-bottom: 40px;
        }
        
        .header h1 {
            font-size: 2.5em;
            margin: 0;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }
        
        .debug-section {
            background: rgba(255, 255, 255, 0.15);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 25px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .debug-section h3 {
            color: #ffd700;
            margin-top: 0;
            font-size: 1.4em;
        }
        
        .status-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .status-card {
            background: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-radius: 10px;
            border-left: 4px solid #00ff88;
        }
        
        .status-card.error {
            border-left-color: #ff4757;
        }
        
        .status-card.warning {
            border-left-color: #ffa502;
        }
        
        .log-container {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 10px;
            padding: 20px;
            max-height: 300px;
            overflow-y: auto;
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
            line-height: 1.4;
        }
        
        .log-entry {
            margin-bottom: 8px;
            padding: 5px;
            border-radius: 3px;
        }
        
        .log-entry.info {
            background: rgba(52, 152, 219, 0.2);
        }
        
        .log-entry.success {
            background: rgba(46, 204, 113, 0.2);
        }
        
        .log-entry.error {
            background: rgba(231, 76, 60, 0.2);
        }
        
        .log-entry.warning {
            background: rgba(241, 196, 15, 0.2);
        }
        
        .timestamp {
            color: #bdc3c7;
            font-size: 0.8em;
        }
        
        .controls {
            display: flex;
            gap: 15px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }
        
        .btn {
            background: linear-gradient(45deg, #00ff88, #00cc6a);
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            color: white;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 255, 136, 0.3);
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 255, 136, 0.4);
        }
        
        .btn.secondary {
            background: linear-gradient(45deg, #3742fa, #2f3542);
            box-shadow: 0 4px 15px rgba(55, 66, 250, 0.3);
        }
        
        .btn.secondary:hover {
            box-shadow: 0 6px 20px rgba(55, 66, 250, 0.4);
        }
        
        .progress-indicator {
            width: 100%;
            height: 6px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 3px;
            overflow: hidden;
            margin: 15px 0;
        }
        
        .progress-bar {
            height: 100%;
            background: linear-gradient(90deg, #00ff88, #00cc6a);
            border-radius: 3px;
            transition: width 0.3s ease;
            width: 0%;
        }
        
        .state-viewer {
            background: rgba(0, 0, 0, 0.4);
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
        }
        
        .state-viewer pre {
            margin: 0;
            color: #00ff88;
            font-size: 0.9em;
            white-space: pre-wrap;
            word-break: break-word;
        }
        
        .test-results {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }
        
        .test-result {
            background: rgba(255, 255, 255, 0.1);
            padding: 15px;
            border-radius: 8px;
            text-align: center;
        }
        
        .test-result.pass {
            border: 2px solid #00ff88;
        }
        
        .test-result.fail {
            border: 2px solid #ff4757;
        }
        
        .test-result .icon {
            font-size: 2em;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîç Tab Persistence Debugger</h1>
            <p>Real-time debugging tool to identify why tab switching persistence isn't working as expected</p>
        </div>
        
        <div class="controls">
            <button class="btn" onclick="startDebugging()">üöÄ Start Debug Session</button>
            <button class="btn secondary" onclick="simulateTabSwitch()">üîÑ Simulate Tab Switch</button>
            <button class="btn secondary" onclick="testStateRestoration()">‚ö° Test State Restoration</button>
            <button class="btn secondary" onclick="clearLogs()">üóëÔ∏è Clear Logs</button>
        </div>
        
        <div class="status-grid">
            <div class="status-card" id="visibility-status">
                <h4>üëÅÔ∏è Visibility Detection</h4>
                <p id="visibility-text">Monitoring...</p>
                <div class="progress-indicator">
                    <div class="progress-bar" id="visibility-progress"></div>
                </div>
            </div>
            
            <div class="status-card" id="state-status">
                <h4>üíæ State Management</h4>
                <p id="state-text">Ready</p>
                <div class="progress-indicator">
                    <div class="progress-bar" id="state-progress"></div>
                </div>
            </div>
            
            <div class="status-card" id="timing-status">
                <h4>‚è±Ô∏è Timing Analysis</h4>
                <p id="timing-text">Waiting for events...</p>
                <div class="progress-indicator">
                    <div class="progress-bar" id="timing-progress"></div>
                </div>
            </div>
            
            <div class="status-card" id="ui-status">
                <h4>üé® UI Updates</h4>
                <p id="ui-text">Monitoring...</p>
                <div class="progress-indicator">
                    <div class="progress-bar" id="ui-progress"></div>
                </div>
            </div>
        </div>
        
        <div class="debug-section">
            <h3>üìä Real-time Event Log</h3>
            <div class="log-container" id="debug-log">
                <div class="log-entry info">
                    <span class="timestamp">[00:00:00]</span> Debug session initialized. Switch tabs to test persistence...
                </div>
            </div>
        </div>
        
        <div class="debug-section">
            <h3>üß™ Automated Tests</h3>
            <div class="test-results" id="test-results">
                <!-- Test results will be populated here -->
            </div>
        </div>
        
        <div class="debug-section">
            <h3>üì± Current State</h3>
            <div class="state-viewer">
                <pre id="current-state">Loading state...</pre>
            </div>
        </div>
        
        <div class="debug-section">
            <h3>üéØ Potential Issues Detected</h3>
            <div id="issues-list">
                <p>Running diagnostics...</p>
            </div>
        </div>
    </div>

    <script>
        // Mock state to simulate your application
        let mockState = {
            isInProgress: false,
            query: "",
            progress: 0,
            stage: 0,
            stageLabel: "Ready",
            lastUpdated: Date.now(),
            tabSwitchCount: 0,
            restorationAttempts: 0
        };
        
        let debugStartTime = Date.now();
        let visibilityEvents = [];
        let stateEvents = [];
        let uiEvents = [];
        let isDebugging = false;
        
        function log(message, type = 'info') {
            const timestamp = new Date().toLocaleTimeString();
            const logContainer = document.getElementById('debug-log');
            const entry = document.createElement('div');
            entry.className = `log-entry ${type}`;
            entry.innerHTML = `<span class="timestamp">[${timestamp}]</span> ${message}`;
            logContainer.appendChild(entry);
            logContainer.scrollTop = logContainer.scrollHeight;
            
            // Store events for analysis
            const event = { timestamp: Date.now(), message, type };
            if (message.includes('visibility')) {
                visibilityEvents.push(event);
            } else if (message.includes('state') || message.includes('save') || message.includes('restore')) {
                stateEvents.push(event);
            } else if (message.includes('UI') || message.includes('update')) {
                uiEvents.push(event);
            }
        }
        
        function updateStatus(cardId, text, progress = 0, isError = false) {
            const card = document.getElementById(cardId);
            const textEl = document.getElementById(cardId.replace('-status', '-text'));
            const progressEl = document.getElementById(cardId.replace('-status', '-progress'));
            
            if (textEl) textEl.textContent = text;
            if (progressEl) progressEl.style.width = `${progress}%`;
            
            if (isError) {
                card.className = 'status-card error';
            } else if (progress === 100) {
                card.className = 'status-card';
            } else {
                card.className = 'status-card warning';
            }
        }
        
        function updateCurrentState() {
            const stateEl = document.getElementById('current-state');
            stateEl.textContent = JSON.stringify(mockState, null, 2);
        }
        
        function startDebugging() {
            if (isDebugging) {
                log('Debug session already running', 'warning');
                return;
            }
            
            isDebugging = true;
            debugStartTime = Date.now();
            log('üöÄ Starting comprehensive debug session...', 'success');
            
            // Set up visibility change listener
            document.addEventListener('visibilitychange', handleVisibilityChange);
            log('üëÅÔ∏è Visibility change listener attached', 'info');
            updateStatus('visibility-status', 'Listening for visibility changes', 25);
            
            // Set up page focus/blur listeners
            window.addEventListener('focus', handlePageFocus);
            window.addEventListener('blur', handlePageBlur);
            log('üéØ Focus/blur listeners attached', 'info');
            
            // Start mock progress simulation
            startMockProgress();
            
            // Run initial diagnostics
            setTimeout(runDiagnostics, 1000);
            
            updateStatus('state-status', 'Monitoring state changes', 50);
            updateCurrentState();
        }
        
        function startMockProgress() {
            mockState.isInProgress = true;
            mockState.query = "Debugging tab persistence issue";
            mockState.stage = 1;
            mockState.stageLabel = "Analyzing visibility events...";
            mockState.progress = 10;
            
            log('üìä Mock progress started', 'info');
            updateCurrentState();
            
            const progressInterval = setInterval(() => {
                if (!isDebugging || mockState.progress >= 100) {
                    clearInterval(progressInterval);
                    return;
                }
                
                mockState.progress += Math.random() * 5;
                mockState.lastUpdated = Date.now();
                
                if (mockState.progress > 30 && mockState.stage === 1) {
                    mockState.stage = 2;
                    mockState.stageLabel = "Testing state persistence...";
                    log('üìà Progress: Stage 2 - Testing state persistence', 'info');
                }
                
                if (mockState.progress > 70 && mockState.stage === 2) {
                    mockState.stage = 3;
                    mockState.stageLabel = "Verifying UI updates...";
                    log('üìà Progress: Stage 3 - Verifying UI updates', 'info');
                }
                
                updateCurrentState();
                updateStatus('state-status', `Progress: ${Math.round(mockState.progress)}%`, mockState.progress);
            }, 1000);
        }
        
        function handleVisibilityChange() {
            const isVisible = !document.hidden;
            const timeSinceStart = Date.now() - debugStartTime;
            
            if (isVisible) {
                log(`üîç Tab became VISIBLE after ${timeSinceStart}ms`, 'success');
                mockState.tabSwitchCount++;
                
                // Simulate state restoration attempt
                setTimeout(() => {
                    mockState.restorationAttempts++;
                    log(`‚ö° Attempting state restoration (#${mockState.restorationAttempts})`, 'info');
                    
                    // Simulate potential timing issues
                    const restorationDelay = Math.random() * 500; // 0-500ms delay
                    setTimeout(() => {
                        log(`‚úÖ State restoration completed (${restorationDelay.toFixed(0)}ms delay)`, 'success');
                        updateCurrentState();
                        
                        // Check if UI updates are delayed
                        setTimeout(() => {
                            log('üé® UI update check - this is where your UI should reflect the restored state', 'warning');
                            updateStatus('ui-status', 'UI should be updated now', 100);
                        }, 100);
                        
                    }, restorationDelay);
                    
                }, 50); // Small delay to simulate real-world conditions
                
                updateStatus('visibility-status', 'Tab is visible', 100);
            } else {
                log('üëª Tab became HIDDEN - saving state...', 'warning');
                
                // Simulate state saving
                setTimeout(() => {
                    log('üíæ State saved successfully', 'success');
                    updateStatus('state-status', 'State saved', 75);
                }, 25);
                
                updateStatus('visibility-status', 'Tab is hidden', 50);
            }
            
            updateCurrentState();
        }
        
        function handlePageFocus() {
            log('üéØ Page gained focus', 'info');
            updateStatus('visibility-status', 'Page focused', 100);
        }
        
        function handlePageBlur() {
            log('üò¥ Page lost focus', 'info');
            updateStatus('visibility-status', 'Page blurred', 50);
        }
        
        function simulateTabSwitch() {
            log('üîÑ Simulating tab switch...', 'info');
            
            // Simulate going away
            document.dispatchEvent(new Event('visibilitychange'));
            Object.defineProperty(document, 'hidden', { value: true, configurable: true });
            
            setTimeout(() => {
                // Simulate coming back
                Object.defineProperty(document, 'hidden', { value: false, configurable: true });
                document.dispatchEvent(new Event('visibilitychange'));
            }, 2000);
        }
        
        function testStateRestoration() {
            log('‚ö° Testing state restoration timing...', 'info');
            
            const originalState = { ...mockState };
            
            // Simulate state corruption/reset
            mockState.isInProgress = false;
            mockState.progress = 0;
            mockState.stage = 0;
            mockState.stageLabel = "Reset";
            
            log('‚ùå State reset (simulating issue)', 'error');
            updateCurrentState();
            
            // Test restoration with different timing
            const timings = [0, 50, 100, 250, 500];
            let testIndex = 0;
            
            function runTimingTest() {
                if (testIndex >= timings.length) {
                    log('‚úÖ Timing tests completed', 'success');
                    return;
                }
                
                const delay = timings[testIndex];
                log(`‚è±Ô∏è Testing restoration with ${delay}ms delay...`, 'info');
                
                setTimeout(() => {
                    mockState = { ...originalState };
                    mockState.lastUpdated = Date.now();
                    log(`‚úÖ State restored after ${delay}ms`, 'success');
                    updateCurrentState();
                    
                    testIndex++;
                    setTimeout(runTimingTest, 1000);
                }, delay);
            }
            
            runTimingTest();
        }
        
        function runDiagnostics() {
            log('üîç Running automated diagnostics...', 'info');
            
            const tests = [
                {
                    name: 'Visibility API Support',
                    test: () => typeof document.hidden !== 'undefined',
                    critical: true
                },
                {
                    name: 'State Persistence Logic',
                    test: () => mockState.hasOwnProperty('isInProgress'),
                    critical: true
                },
                {
                    name: 'Timing Consistency',
                    test: () => {
                        const timingVariance = stateEvents.length > 1 ? 
                            Math.max(...stateEvents.map(e => e.timestamp)) - Math.min(...stateEvents.map(e => e.timestamp)) : 0;
                        return timingVariance < 1000; // Less than 1 second variance
                    },
                    critical: false
                },
                {
                    name: 'Event Order Integrity',
                    test: () => visibilityEvents.length === 0 || visibilityEvents.every((e, i) => i === 0 || e.timestamp >= visibilityEvents[i-1].timestamp),
                    critical: false
                },
                {
                    name: 'State Update Frequency',
                    test: () => (Date.now() - mockState.lastUpdated) < 5000,
                    critical: false
                }
            ];
            
            const testResults = document.getElementById('test-results');
            testResults.innerHTML = '';
            
            tests.forEach(test => {
                const result = test.test();
                const testEl = document.createElement('div');
                testEl.className = `test-result ${result ? 'pass' : 'fail'}`;
                testEl.innerHTML = `
                    <div class="icon">${result ? '‚úÖ' : '‚ùå'}</div>
                    <h4>${test.name}</h4>
                    <p>${result ? 'PASS' : 'FAIL'}</p>
                    ${test.critical && !result ? '<p style="color: #ff4757;"><strong>CRITICAL</strong></p>' : ''}
                `;
                testResults.appendChild(testEl);
                
                log(`üß™ Test "${test.name}": ${result ? 'PASS' : 'FAIL'}${test.critical && !result ? ' (CRITICAL)' : ''}`, result ? 'success' : 'error');
            });
            
            // Analyze potential issues
            setTimeout(analyzeIssues, 500);
        }
        
        function analyzeIssues() {
            const issuesList = document.getElementById('issues-list');
            const issues = [];
            
            // Check for timing issues
            if (stateEvents.length > 0) {
                const avgDelay = stateEvents.reduce((sum, e, i) => {
                    if (i === 0) return 0;
                    return sum + (e.timestamp - stateEvents[i-1].timestamp);
                }, 0) / Math.max(stateEvents.length - 1, 1);
                
                if (avgDelay > 200) {
                    issues.push({
                        type: 'timing',
                        severity: 'high',
                        message: `High average delay between state events (${avgDelay.toFixed(0)}ms). This could cause UI inconsistencies.`
                    });
                }
            }
            
            // Check for rapid visibility changes
            if (visibilityEvents.length > 3) {
                issues.push({
                    type: 'visibility',
                    severity: 'medium',
                    message: 'Multiple rapid visibility changes detected. This might indicate unstable tab switching detection.'
                });
            }
            
            // Check for state restoration failures
            if (mockState.restorationAttempts > mockState.tabSwitchCount) {
                issues.push({
                    type: 'state',
                    severity: 'high',
                    message: 'More restoration attempts than tab switches detected. This suggests the restoration logic is being triggered incorrectly.'
                });
            }
            
            // Check for UI update delays
            const timeSinceLastUpdate = Date.now() - mockState.lastUpdated;
            if (timeSinceLastUpdate > 3000 && mockState.isInProgress) {
                issues.push({
                    type: 'ui',
                    severity: 'medium',
                    message: `UI hasn't been updated for ${Math.round(timeSinceLastUpdate/1000)} seconds. This could indicate UI update issues.`
                });
            }
            
            if (issues.length === 0) {
                issuesList.innerHTML = '<p style="color: #00ff88;">‚úÖ No critical issues detected! The problem might be elsewhere in your implementation.</p>';
            } else {
                issuesList.innerHTML = issues.map(issue => `
                    <div style="margin-bottom: 15px; padding: 15px; background: rgba(255, 255, 255, 0.1); border-radius: 8px; border-left: 4px solid ${issue.severity === 'high' ? '#ff4757' : '#ffa502'};">
                        <strong>${issue.severity.toUpperCase()}:</strong> ${issue.message}
                        <br><em>Type: ${issue.type}</em>
                    </div>
                `).join('');
            }
            
            log(`üéØ Analysis complete. Found ${issues.length} potential issues.`, issues.length > 0 ? 'warning' : 'success');
        }
        
        function clearLogs() {
            document.getElementById('debug-log').innerHTML = '';
            visibilityEvents = [];
            stateEvents = [];
            uiEvents = [];
            log('üóëÔ∏è Logs cleared', 'info');
        }
        
        // Initialize
        updateCurrentState();
        
        // Auto-start debugging after a brief delay
        setTimeout(() => {
            log('üí° TIP: Switch between this tab and another tab to test persistence!', 'info');
            log('üîß Click "Start Debug Session" to begin comprehensive testing', 'info');
        }, 1000);
    </script>
</body>
</html>