import React, { useState, useEffect, useCallback, useMemo, memo } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { 
  Plus, Search, Edit, Star, TrendingUp, Database, AlertCircle, 
  Sparkles, Settings, FileText, Copy, Share2, Zap, Clock,
  Heart, Lock, Globe, BarChart, Lightbulb, Target, Brain,
  ChevronRight, Filter, SortAsc, Grid, List, StarOff, Trash2
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { useToast } from '@/hooks/use-toast';
import { motion, AnimatePresence } from 'framer-motion';
import { useAuth } from '@/hooks/useAuth';

// Types
interface ResearchTemplate {
  id: string;
  name: string;
  description: string;
  prompt_template: string;
  category: string;
  icon: string;
  variables: TemplateVariable[];
  created_by: string;
  created_at: string;
  updated_at: string;
  usage_count: number;
  effectiveness_score: number;
  tags: string[];
  is_public: boolean;
  is_favorite: boolean;
  personal_notes?: string;
  last_used?: string;
  success_rate?: number;
  user_rating?: number;
  customizations?: TemplateCustomization;
}

interface TemplateVariable {
  name: string;
  type: 'text' | 'number' | 'date' | 'select' | 'multiline';
  description?: string;
  default?: string;
  options?: string[];
  required?: boolean;
}

interface TemplateCustomization {
  tone?: 'professional' | 'casual' | 'academic' | 'creative';
  length?: 'brief' | 'standard' | 'comprehensive';
  focus?: string[];
  language?: string;
}

interface TemplateCategory {
  id: string;
  name: string;
  description: string;
  icon: React.ComponentType<{ className?: string }>;
  color: string;
  templates: string[];
}

interface UserPreferences {
  defaultCategory?: string;
  favoriteTemplates: string[];
  recentTemplates: string[];
  viewMode: 'grid' | 'list';
  sortBy: 'usage' | 'effectiveness' | 'recent' | 'alphabetical';
  showOnlyFavorites: boolean;
  autoFillDefaults: boolean;
}

// Constants
const ICON_MAP: Record<string, React.ComponentType<{ className?: string }>> = {
  TrendingUp, Database, AlertCircle, Sparkles, Settings, 
  FileText, Search, Zap, Heart, Lock, Globe, BarChart, 
  Lightbulb, Target, Brain
};

const TEMPLATE_CATEGORIES: TemplateCategory[] = [
  { id: 'market', name: 'Market Analysis', icon: TrendingUp, color: 'blue', templates: [] },
  { id: 'financial', name: 'Financial Research', icon: BarChart, color: 'green', templates: [] },
  { id: 'competitive', name: 'Competitive Intel', icon: Target, color: 'purple', templates: [] },
  { id: 'technical', name: 'Technical Analysis', icon: Database, color: 'orange', templates: [] },
  { id: 'creative', name: 'Creative Research', icon: Lightbulb, color: 'pink', templates: [] },
  { id: 'academic', name: 'Academic Research', icon: Brain, color: 'indigo', templates: [] },
  { id: 'custom', name: 'Custom Templates', icon: FileText, color: 'gray', templates: [] }
];

const SUGGESTED_TEMPLATES = [
  {
    category: 'market',
    templates: [
      {
        name: 'Market Trend Analysis',
        description: 'Analyze trends in specific market sectors',
        template: 'Analyze current market trends for {industry} focusing on {timeframe}. Include growth projections, key drivers, and potential risks.',
        variables: [
          { name: 'industry', type: 'text', description: 'Industry or sector to analyze' },
          { name: 'timeframe', type: 'select', options: ['3 months', '6 months', '1 year', '5 years'] }
        ]
      }
    ]
  }
];

// Sub-components
const TemplateCard = memo<{
  template: ResearchTemplate;
  viewMode: 'grid' | 'list';
  onUse: (template: ResearchTemplate) => void;
  onEdit: (template: ResearchTemplate) => void;
  onToggleFavorite: (templateId: string) => void;
  onDelete: (templateId: string) => void;
  userRole?: string;
}>(({ template, viewMode, onUse, onEdit, onToggleFavorite, onDelete, userRole }) => {
  const Icon = ICON_MAP[template.icon] || FileText;
  const category = TEMPLATE_CATEGORIES.find(c => c.id === template.category);
  
  const effectivenessColor = useMemo(() => {
    if (template.effectiveness_score >= 0.8) return 'text-green-500';
    if (template.effectiveness_score >= 0.6) return 'text-yellow-500';
    return 'text-orange-500';
  }, [template.effectiveness_score]);

  if (viewMode === 'list') {
    return (
      <motion.div
        layout
        initial={{ opacity: 0, x: -20 }}
        animate={{ opacity: 1, x: 0 }}
        exit={{ opacity: 0, x: 20 }}
        className="group"
      >
        <Card className="hover:shadow-lg transition-all duration-200 bg-slate-900/50 border-slate-700/50 hover:border-primary/30">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4 flex-1">
                <div className={cn(
                  "w-10 h-10 rounded-lg flex items-center justify-center flex-shrink-0",
                  `bg-${category?.color || 'gray'}-500/20`
                )}>
                  <Icon className={cn("w-5 h-5", `text-${category?.color || 'gray'}-400`)} />
                </div>
                
                <div className="flex-1 min-w-0">
                  <div className="flex items-center gap-2">
                    <h3 className="font-medium text-gray-100 truncate">{template.name}</h3>
                    {template.is_favorite && (
                      <Heart className="w-4 h-4 text-red-400 fill-red-400" />
                    )}
                    {template.is_public ? (
                      <Globe className="w-3 h-3 text-blue-400" />
                    ) : (
                      <Lock className="w-3 h-3 text-gray-500" />
                    )}
                  </div>
                  <p className="text-sm text-gray-400 truncate">{template.description}</p>
                </div>
                
                <div className="flex items-center gap-6 text-sm text-gray-500">
                  <div className="flex items-center gap-1">
                    <Zap className="w-4 h-4" />
                    <span>{template.usage_count}</span>
                  </div>
                  <div className={cn("flex items-center gap-1", effectivenessColor)}>
                    <Star className="w-4 h-4" />
                    <span>{(template.effectiveness_score * 100).toFixed(0)}%</span>
                  </div>
                  {template.last_used && (
                    <div className="flex items-center gap-1">
                      <Clock className="w-4 h-4" />
                      <span>{new Date(template.last_used).toLocaleDateString()}</span>
                    </div>
                  )}
                </div>
              </div>
              
              <div className="flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity">
                <Button
                  size="sm"
                  onClick={() => onUse(template)}
                  className="bg-primary hover:bg-primary/80"
                >
                  Use
                </Button>
                <Button
                  size="icon"
                  variant="ghost"
                  onClick={() => onToggleFavorite(template.id)}
                >
                  {template.is_favorite ? (
                    <StarOff className="w-4 h-4" />
                  ) : (
                    <Star className="w-4 h-4" />
                  )}
                </Button>
                {(userRole === 'admin' || template.created_by === userRole) && (
                  <>
                    <Button
                      size="icon"
                      variant="ghost"
                      onClick={() => onEdit(template)}
                    >
                      <Edit className="w-4 h-4" />
                    </Button>
                    <Button
                      size="icon"
                      variant="ghost"
                      onClick={() => onDelete(template.id)}
                      className="text-red-400 hover:text-red-300"
                    >
                      <Trash2 className="w-4 h-4" />
                    </Button>
                  </>
                )}
              </div>
            </div>
          </CardContent>
        </Card>
      </motion.div>
    );
  }

  // Grid view
  return (
    <motion.div
      layout
      initial={{ opacity: 0, scale: 0.9 }}
      animate={{ opacity: 1, scale: 1 }}
      exit={{ opacity: 0, scale: 0.9 }}
      whileHover={{ y: -4 }}
      className="group"
    >
      <Card className="h-full hover:shadow-xl transition-all duration-200 bg-gradient-to-br from-slate-900/80 to-slate-800/60 border-slate-700/50 hover:border-primary/40">
        <CardHeader className="pb-3">
          <div className="flex items-start justify-between">
            <div className="flex items-center gap-3">
              <div className={cn(
                "w-10 h-10 rounded-lg flex items-center justify-center",
                `bg-${category?.color || 'gray'}-500/20`
              )}>
                <Icon className={cn("w-5 h-5", `text-${category?.color || 'gray'}-400`)} />
              </div>
              <div className="flex-1">
                <CardTitle className="text-gray-100 text-sm font-medium flex items-center gap-2">
                  {template.name}
                  {template.is_favorite && (
                    <Heart className="w-4 h-4 text-red-400 fill-red-400" />
                  )}
                </CardTitle>
                <div className="flex items-center gap-2 mt-1">
                  <Badge variant="outline" className="text-xs border-slate-600 text-gray-400">
                    {category?.name}
                  </Badge>
                  <div className={cn("flex items-center gap-1 text-xs", effectivenessColor)}>
                    <Star className="w-3 h-3" />
                    <span>{(template.effectiveness_score * 100).toFixed(0)}%</span>
                  </div>
                </div>
              </div>
            </div>
            <div className="opacity-0 group-hover:opacity-100 transition-opacity">
              <Button
                size="icon"
                variant="ghost"
                onClick={() => onToggleFavorite(template.id)}
                className="w-8 h-8"
              >
                {template.is_favorite ? (
                  <StarOff className="w-4 h-4" />
                ) : (
                  <Star className="w-4 h-4" />
                )}
              </Button>
            </div>
          </div>
        </CardHeader>
        
        <CardContent className="pt-0">
          <CardDescription className="text-gray-400 text-sm mb-3 line-clamp-2">
            {template.description}
          </CardDescription>
          
          {/* Variables preview */}
          {template.variables.length > 0 && (
            <div className="mb-3">
              <div className="flex flex-wrap gap-1">
                {template.variables.slice(0, 3).map((variable, idx) => (
                  <Badge key={idx} variant="secondary" className="text-xs bg-slate-800/50 text-gray-400">
                    {"{" + variable.name + "}"}
                  </Badge>
                ))}
                {template.variables.length > 3 && (
                  <Badge variant="secondary" className="text-xs bg-slate-800/50 text-gray-400">
                    +{template.variables.length - 3}
                  </Badge>
                )}
              </div>
            </div>
          )}
          
          {/* Personal note */}
          {template.personal_notes && (
            <div className="mb-3 p-2 bg-slate-800/30 rounded text-xs text-gray-400 italic">
              Note: {template.personal_notes}
            </div>
          )}
          
          {/* Stats */}
          <div className="flex items-center justify-between text-xs text-gray-500 mb-3">
            <div className="flex items-center gap-3">
              <div className="flex items-center gap-1">
                <Zap className="w-3 h-3" />
                <span>{template.usage_count} uses</span>
              </div>
              {template.last_used && (
                <div className="flex items-center gap-1">
                  <Clock className="w-3 h-3" />
                  <span>{new Date(template.last_used).toLocaleDateString()}</span>
                </div>
              )}
            </div>
          </div>
          
          {/* Actions */}
          <div className="flex gap-2">
            <Button 
              onClick={() => onUse(template)}
              className="flex-1 bg-primary hover:bg-primary/80 text-white text-xs"
            >
              Use Template
            </Button>
            <Button 
              variant="outline" 
              size="icon"
              className="border-slate-600 hover:border-primary/30"
              onClick={() => {
                navigator.clipboard.writeText(template.prompt_template);
                // Show toast
              }}
            >
              <Copy className="w-3 h-3" />
            </Button>
          </div>
        </CardContent>
      </Card>
    </motion.div>
  );
});

TemplateCard.displayName = "TemplateCard";

const TemplateForm = memo<{
  template?: ResearchTemplate;
  categories: TemplateCategory[];
  onSave: (data: any) => void;
  onCancel: () => void;
}>(({ template, categories, onSave, onCancel }) => {
  const [formData, setFormData] = useState({
    name: template?.name || '',
    description: template?.description || '',
    prompt_template: template?.prompt_template || '',
    category: template?.category || 'custom',
    icon: template?.icon || 'FileText',
    tags: template?.tags?.join(', ') || '',
    is_public: template?.is_public || false,
    personal_notes: template?.personal_notes || '',
    customizations: template?.customizations || {
      tone: 'professional',
      length: 'standard'
    }
  });

  const [variables, setVariables] = useState<TemplateVariable[]>(
    template?.variables || []
  );

  const extractVariables = useCallback((text: string) => {
    const matches = text.match(/\{([^}]+)\}/g) || [];
    const varNames = matches.map(m => m.slice(1, -1));
    
    // Update variables list preserving existing metadata
    const updatedVars = varNames.map(name => {
      const existing = variables.find(v => v.name === name);
      return existing || { name, type: 'text' as const };
    });
    
    setVariables(updatedVars);
  }, [variables]);

  useEffect(() => {
    extractVariables(formData.prompt_template);
  }, [formData.prompt_template, extractVariables]);

  const handleSubmit = () => {
    onSave({
      ...formData,
      variables,
      tags: formData.tags.split(',').map(t => t.trim()).filter(Boolean)
    });
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-2 gap-4">
        <div>
          <Label>Template Name</Label>
          <Input
            value={formData.name}
            onChange={(e) => setFormData({ ...formData, name: e.target.value })}
            placeholder="e.g., Market Analysis Report"
            className="bg-slate-800 border-slate-600"
          />
        </div>
        <div>
          <Label>Category</Label>
          <Select 
            value={formData.category} 
            onValueChange={(value) => setFormData({ ...formData, category: value })}
          >
            <SelectTrigger className="bg-slate-800 border-slate-600">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {categories.map(cat => (
                <SelectItem key={cat.id} value={cat.id}>
                  <div className="flex items-center gap-2">
                    <cat.icon className="w-4 h-4" />
                    {cat.name}
                  </div>
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>

      <div>
        <Label>Description</Label>
        <Textarea
          value={formData.description}
          onChange={(e) => setFormData({ ...formData, description: e.target.value })}
          placeholder="Brief description of what this template does..."
          className="bg-slate-800 border-slate-600"
          rows={2}
        />
      </div>

      <div>
        <Label>
          Template Content
          <span className="text-xs text-gray-500 ml-2">
            Use {"{variable}"} for dynamic content
          </span>
        </Label>
        <Textarea
          value={formData.prompt_template}
          onChange={(e) => setFormData({ ...formData, prompt_template: e.target.value })}
          placeholder="Analyze the {topic} market focusing on {specific_aspect}..."
          className="bg-slate-800 border-slate-600 font-mono text-sm"
          rows={6}
        />
      </div>

      {/* Variable Configuration */}
      {variables.length > 0 && (
        <div>
          <Label>Configure Variables</Label>
          <div className="space-y-2 mt-2">
            {variables.map((variable, idx) => (
              <div key={variable.name} className="flex items-center gap-2 p-2 bg-slate-800/50 rounded">
                <code className="text-sm text-primary">{"{" + variable.name + "}"}</code>
                <Select
                  value={variable.type}
                  onValueChange={(value: any) => {
                    const updated = [...variables];
                    updated[idx].type = value;
                    setVariables(updated);
                  }}
                >
                  <SelectTrigger className="w-32 h-8 text-xs">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="text">Text</SelectItem>
                    <SelectItem value="number">Number</SelectItem>
                    <SelectItem value="date">Date</SelectItem>
                    <SelectItem value="select">Dropdown</SelectItem>
                    <SelectItem value="multiline">Multiline</SelectItem>
                  </SelectContent>
                </Select>
                <Input
                  placeholder="Description (optional)"
                  className="flex-1 h-8 text-xs"
                  value={variable.description || ''}
                  onChange={(e) => {
                    const updated = [...variables];
                    updated[idx].description = e.target.value;
                    setVariables(updated);
                  }}
                />
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Customization Options */}
      <div className="grid grid-cols-2 gap-4">
        <div>
          <Label>Default Tone</Label>
          <Select
            value={formData.customizations.tone}
            onValueChange={(value: any) => 
              setFormData({ 
                ...formData, 
                customizations: { ...formData.customizations, tone: value }
              })
            }
          >
            <SelectTrigger className="bg-slate-800 border-slate-600">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="professional">Professional</SelectItem>
              <SelectItem value="casual">Casual</SelectItem>
              <SelectItem value="academic">Academic</SelectItem>
              <SelectItem value="creative">Creative</SelectItem>
            </SelectContent>
          </Select>
        </div>
        <div>
          <Label>Default Length</Label>
          <Select
            value={formData.customizations.length}
            onValueChange={(value: any) => 
              setFormData({ 
                ...formData, 
                customizations: { ...formData.customizations, length: value }
              })
            }
          >
            <SelectTrigger className="bg-slate-800 border-slate-600">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="brief">Brief</SelectItem>
              <SelectItem value="standard">Standard</SelectItem>
              <SelectItem value="comprehensive">Comprehensive</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      <div>
        <Label>Tags</Label>
        <Input
          value={formData.tags}
          onChange={(e) => setFormData({ ...formData, tags: e.target.value })}
          placeholder="finance, analysis, market (comma-separated)"
          className="bg-slate-800 border-slate-600"
        />
      </div>

      <div>
        <Label>Personal Notes</Label>
        <Textarea
          value={formData.personal_notes}
          onChange={(e) => setFormData({ ...formData, personal_notes: e.target.value })}
          placeholder="Add notes for yourself about when/how to use this template..."
          className="bg-slate-800 border-slate-600"
          rows={2}
        />
      </div>

      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <Switch
            id="public"
            checked={formData.is_public}
            onCheckedChange={(checked) => setFormData({ ...formData, is_public: checked })}
          />
          <Label htmlFor="public" className="cursor-pointer">
            Share with community
          </Label>
        </div>
        
        <div className="flex gap-2">
          <Button variant="outline" onClick={onCancel}>
            Cancel
          </Button>
          <Button onClick={handleSubmit} className="bg-primary hover:bg-primary/80">
            {template ? 'Update' : 'Create'} Template
          </Button>
        </div>
      </div>
    </div>
  );
});

TemplateForm.displayName = "TemplateForm";

// Main Component
const TemplateManager: React.FC = () => {
  const { user } = useAuth();
  const { toast } = useToast();
  
  const [templates, setTemplates] = useState<ResearchTemplate[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [editingTemplate, setEditingTemplate] = useState<ResearchTemplate | null>(null);
  
  const [preferences, setPreferences] = useState<UserPreferences>({
    favoriteTemplates: [],
    recentTemplates: [],
    viewMode: 'grid',
    sortBy: 'usage',
    showOnlyFavorites: false,
    autoFillDefaults: true
  });

  // Load templates and preferences
  useEffect(() => {
    loadTemplates();
    loadUserPreferences();
  }, []);

  const loadTemplates = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/templates/user');
      const data = await response.json();
      if (data.success) {
        setTemplates(data.templates);
      }
    } catch (error) {
      console.error('Error loading templates:', error);
      toast({
        title: "Error",
        description: "Failed to load templates",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const loadUserPreferences = async () => {
    try {
      const response = await fetch('/api/user/template-preferences');
      const data = await response.json();
      if (data.success) {
        setPreferences(data.preferences);
      }
    } catch (error) {
      console.error('Error loading preferences:', error);
    }
  };

  const handleUseTemplate = useCallback(async (template: ResearchTemplate) => {
    // Show variable input dialog
    const filledVariables: Record<string, string> = {};
    
    for (const variable of template.variables) {
      const value = prompt(
        `${variable.description || variable.name}:`,
        variable.default || ''
      );
      if (value !== null) {
        filledVariables[variable.name] = value;
      }
    }

    // Fill template
    let filledTemplate = template.prompt_template;
    Object.entries(filledVariables).forEach(([key, value]) => {
      filledTemplate = filledTemplate.replace(new RegExp(`\\{${key}\\}`, 'g'), value);
    });

    // Apply customizations
    if (template.customizations) {
      filledTemplate = `[Tone: ${template.customizations.tone}]\n[Length: ${template.customizations.length}]\n\n${filledTemplate}`;
    }

    // Copy to clipboard
    navigator.clipboard.writeText(filledTemplate);
    
    toast({
      title: "Template Ready!",
      description: "Template copied to clipboard. Paste it into your research chat.",
    });

    // Track usage
    await fetch(`/api/templates/${template.id}/usage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ success: true })
    });

    // Update recent templates
    setPreferences(prev => ({
      ...prev,
      recentTemplates: [template.id, ...prev.recentTemplates.filter(id => id !== template.id)].slice(0, 10)
    }));
  }, [toast]);

  const handleToggleFavorite = useCallback(async (templateId: string) => {
    const template = templates.find(t => t.id === templateId);
    if (!template) return;

    const newFavoriteStatus = !template.is_favorite;
    
    try {
      const response = await fetch(`/api/templates/${templateId}/favorite`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ is_favorite: newFavoriteStatus })
      });

      if (response.ok) {
        setTemplates(prev => 
          prev.map(t => t.id === templateId ? { ...t, is_favorite: newFavoriteStatus } : t)
        );
        
        setPreferences(prev => ({
          ...prev,
          favoriteTemplates: newFavoriteStatus
            ? [...prev.favoriteTemplates, templateId]
            : prev.favoriteTemplates.filter(id => id !== templateId)
        }));

        toast({
          title: newFavoriteStatus ? "Added to favorites" : "Removed from favorites",
          description: `${template.name} has been ${newFavoriteStatus ? 'added to' : 'removed from'} your favorites.`,
        });
      }
    } catch (error) {
      console.error('Error toggling favorite:', error);
    }
  }, [templates, toast]);

  const handleSaveTemplate = async (data: any) => {
    try {
      const endpoint = editingTemplate 
        ? `/api/templates/${editingTemplate.id}` 
        : '/api/templates/create';
      
      const method = editingTemplate ? 'PUT' : 'POST';
      
      const response = await fetch(endpoint, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });

      const result = await response.json();
      if (result.success) {
        toast({
          title: editingTemplate ? "Template Updated" : "Template Created",
          description: `${data.name} has been ${editingTemplate ? 'updated' : 'created'} successfully.`,
        });
        
        setIsCreateDialogOpen(false);
        setEditingTemplate(null);
        loadTemplates();
      }
    } catch (error) {
      console.error('Error saving template:', error);
      toast({
        title: "Error",
        description: "Failed to save template",
        variant: "destructive"
      });
    }
  };

  // Filtered and sorted templates
  const displayTemplates = useMemo(() => {
    let filtered = templates;

    // Category filter
    if (selectedCategory !== 'all') {
      filtered = filtered.filter(t => t.category === selectedCategory);
    }

    // Search filter
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(t =>
        t.name.toLowerCase().includes(query) ||
        t.description.toLowerCase().includes(query) ||
        t.tags.some(tag => tag.toLowerCase().includes(query))
      );
    }

    // Favorites filter
    if (preferences.showOnlyFavorites) {
      filtered = filtered.filter(t => t.is_favorite);
    }

    // Sort
    return filtered.sort((a, b) => {
      switch (preferences.sortBy) {
        case 'usage':
          return b.usage_count - a.usage_count;
        case 'effectiveness':
          return b.effectiveness_score - a.effectiveness_score;
        case 'recent':
          return new Date(b.last_used || b.created_at).getTime() - 
                 new Date(a.last_used || a.created_at).getTime();
        case 'alphabetical':
          return a.name.localeCompare(b.name);
        default:
          return 0;
      }
    });
  }, [templates, selectedCategory, searchQuery, preferences.showOnlyFavorites, preferences.sortBy]);

  return (
    <div className="min-h-screen bg-gradient-to-b from-slate-900 to-slate-950">
      <div className="max-w-7xl mx-auto p-6 space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-100 flex items-center gap-3">
              <div className="w-12 h-12 bg-primary/20 rounded-xl flex items-center justify-center">
                <Sparkles className="w-6 h-6 text-primary" />
              </div>
              Research Templates
            </h1>
            <p className="text-gray-400 mt-2">
              Personalized templates that adapt to your research style
            </p>
          </div>
          
          <div className="flex items-center gap-3">
            <Popover>
              <PopoverTrigger asChild>
                <Button variant="outline" size="icon">
                  <Settings className="w-4 h-4" />
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-80 bg-slate-900 border-slate-700">
                <div className="space-y-4">
                  <h3 className="font-medium text-gray-100">Preferences</h3>
                  
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <Label htmlFor="view-mode" className="text-sm">View Mode</Label>
                      <div className="flex gap-1">
                        <Button
                          size="icon"
                          variant={preferences.viewMode === 'grid' ? 'default' : 'ghost'}
                          className="w-8 h-8"
                          onClick={() => setPreferences({ ...preferences, viewMode: 'grid' })}
                        >
                          <Grid className="w-4 h-4" />
                        </Button>
                        <Button
                          size="icon"
                          variant={preferences.viewMode === 'list' ? 'default' : 'ghost'}
                          className="w-8 h-8"
                          onClick={() => setPreferences({ ...preferences, viewMode: 'list' })}
                        >
                          <List className="w-4 h-4" />
                        </Button>
                      </div>
                    </div>
                    
                    <div>
                      <Label htmlFor="sort-by" className="text-sm">Sort By</Label>
                      <Select
                        value={preferences.sortBy}
                        onValueChange={(value: any) => 
                          setPreferences({ ...preferences, sortBy: value })
                        }
                      >
                        <SelectTrigger className="mt-1 bg-slate-800 border-slate-600">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="usage">Most Used</SelectItem>
                          <SelectItem value="effectiveness">Most Effective</SelectItem>
                          <SelectItem value="recent">Recently Used</SelectItem>
                          <SelectItem value="alphabetical">Alphabetical</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <Label htmlFor="show-favorites" className="text-sm">Show Only Favorites</Label>
                      <Switch
                        id="show-favorites"
                        checked={preferences.showOnlyFavorites}
                        onCheckedChange={(checked) => 
                          setPreferences({ ...preferences, showOnlyFavorites: checked })
                        }
                      />
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <Label htmlFor="auto-fill" className="text-sm">Auto-fill Defaults</Label>
                      <Switch
                        id="auto-fill"
                        checked={preferences.autoFillDefaults}
                        onCheckedChange={(checked) => 
                          setPreferences({ ...preferences, autoFillDefaults: checked })
                        }
                      />
                    </div>
                  </div>
                </div>
              </PopoverContent>
            </Popover>
            
            <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
              <DialogTrigger asChild>
                <Button className="bg-primary hover:bg-primary/80">
                  <Plus className="w-4 h-4 mr-2" />
                  Create Template
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-3xl max-h-[90vh] overflow-y-auto bg-slate-900 border-slate-700">
                <DialogHeader>
                  <DialogTitle className="text-gray-100">
                    {editingTemplate ? 'Edit Template' : 'Create Research Template'}
                  </DialogTitle>
                </DialogHeader>
                <TemplateForm
                  template={editingTemplate || undefined}
                  categories={TEMPLATE_CATEGORIES}
                  onSave={handleSaveTemplate}
                  onCancel={() => {
                    setIsCreateDialogOpen(false);
                    setEditingTemplate(null);
                  }}
                />
              </DialogContent>
            </Dialog>
          </div>
        </div>

        {/* Search and Filters */}
        <div className="flex items-center gap-4">
          <div className="flex-1 relative">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 w-4 h-4" />
            <Input
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              placeholder="Search templates by name, description, or tags..."
              className="pl-10 bg-slate-800 border-slate-600 text-gray-100"
            />
          </div>
          
          <Select value={selectedCategory} onValueChange={setSelectedCategory}>
            <SelectTrigger className="w-48 bg-slate-800 border-slate-600">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Categories</SelectItem>
              {TEMPLATE_CATEGORIES.map(cat => (
                <SelectItem key={cat.id} value={cat.id}>
                  <div className="flex items-center gap-2">
                    <cat.icon className="w-4 h-4" />
                    {cat.name}
                  </div>
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        {/* Quick Stats */}
        <div className="grid grid-cols-4 gap-4">
          {[
            { label: 'Total Templates', value: templates.length, icon: FileText, color: 'blue' },
            { label: 'Favorites', value: preferences.favoriteTemplates.length, icon: Heart, color: 'red' },
            { label: 'Total Uses', value: templates.reduce((sum, t) => sum + t.usage_count, 0), icon: Zap, color: 'yellow' },
            { label: 'Avg Effectiveness', value: `${(templates.reduce((sum, t) => sum + t.effectiveness_score, 0) / templates.length * 100).toFixed(0)}%`, icon: Target, color: 'green' }
          ].map((stat, idx) => (
            <Card key={idx} className="bg-slate-900/50 border-slate-700/50">
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-400">{stat.label}</p>
                    <p className="text-2xl font-bold text-gray-100">{stat.value}</p>
                  </div>
                  <div className={cn(
                    "w-10 h-10 rounded-lg flex items-center justify-center",
                    `bg-${stat.color}-500/20`
                  )}>
                    <stat.icon className={cn("w-5 h-5", `text-${stat.color}-400`)} />
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Templates Grid/List */}
        <div>
          {loading ? (
            <div className="flex items-center justify-center py-20">
              <div className="text-center">
                <div className="w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4" />
                <p className="text-gray-400">Loading your templates...</p>
              </div>
            </div>
          ) : displayTemplates.length === 0 ? (
            <Card className="bg-slate-900/50 border-slate-700/50">
              <CardContent className="flex flex-col items-center justify-center py-20 text-center">
                <FileText className="w-16 h-16 text-gray-600 mb-4" />
                <h3 className="text-xl font-medium text-gray-300 mb-2">
                  {searchQuery || selectedCategory !== 'all' 
                    ? 'No templates found' 
                    : 'Start building your template library'}
                </h3>
                <p className="text-gray-500 mb-6 max-w-md">
                  {searchQuery || selectedCategory !== 'all'
                    ? 'Try adjusting your search or filters'
                    : 'Create personalized research templates that adapt to your style and remember your preferences'}
                </p>
                <Button 
                  onClick={() => setIsCreateDialogOpen(true)} 
                  className="bg-primary hover:bg-primary/80"
                >
                  <Plus className="w-4 h-4 mr-2" />
                  Create Your First Template
                </Button>
              </CardContent>
            </Card>
          ) : (
            <div className={cn(
              preferences.viewMode === 'grid' 
                ? "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4" 
                : "space-y-3"
            )}>
              <AnimatePresence mode="popLayout">
                {displayTemplates.map((template) => (
                  <TemplateCard
                    key={template.id}
                    template={template}
                    viewMode={preferences.viewMode}
                    onUse={handleUseTemplate}
                    onEdit={(t) => {
                      setEditingTemplate(t);
                      setIsCreateDialogOpen(true);
                    }}
                    onToggleFavorite={handleToggleFavorite}
                    onDelete={async (id) => {
                      if (confirm('Are you sure you want to delete this template?')) {
                        try {
                          await fetch(`/api/templates/${id}`, { method: 'DELETE' });
                          loadTemplates();
                          toast({
                            title: "Template Deleted",
                            description: "The template has been removed.",
                          });
                        } catch (error) {
                          console.error('Error deleting template:', error);
                        }
                      }
                    }}
                    userRole={user?.id}
                  />
                ))}
              </AnimatePresence>
            </div>
          )}
        </div>

        {/* Recent Activity */}
        {preferences.recentTemplates.length > 0 && (
          <div className="mt-8">
            <h2 className="text-lg font-semibold text-gray-100 mb-4 flex items-center gap-2">
              <Clock className="w-5 h-5" />
              Recently Used
            </h2>
            <div className="flex gap-2 overflow-x-auto pb-2">
              {preferences.recentTemplates
                .map(id => templates.find(t => t.id === id))
                .filter(Boolean)
                .slice(0, 5)
                .map((template) => (
                  <Button
                    key={template!.id}
                    variant="outline"
                    size="sm"
                    onClick={() => handleUseTemplate(template!)}
                    className="whitespace-nowrap"
                  >
                    {template!.name}
                  </Button>
                ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default TemplateManager;