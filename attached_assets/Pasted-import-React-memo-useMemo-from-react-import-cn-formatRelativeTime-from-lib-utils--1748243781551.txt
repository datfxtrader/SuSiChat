import React, { memo, useMemo } from "react";
import { cn, formatRelativeTime } from "@/lib/utils";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { ChatMessage } from "@/lib/types";
import { User } from "@shared/schema";

// Types
interface ChatBubbleProps {
  message: ChatMessage;
  currentUser: User;
  className?: string;
  onRetry?: (messageId: string) => void;
  onDelete?: (messageId: string) => void;
}

interface MessageAvatarProps {
  user?: User;
  alt: string;
  size?: "sm" | "md" | "lg";
}

interface MessageMetadata {
  isCurrentUser: boolean;
  isAI: boolean;
  userName: string;
  userInitial: string;
  avatarUrl: string;
}

// Constants
const AVATAR_SIZES = {
  sm: "w-6 h-6",
  md: "w-8 h-8",
  lg: "w-10 h-10"
} as const;

const MESSAGE_STYLES = {
  currentUser: {
    container: "justify-end ml-auto",
    bubble: "bg-primary text-white chat-bubble-user",
    text: "text-white",
    time: "text-white/70 text-right"
  },
  ai: {
    container: "",
    bubble: "bg-white dark:bg-neutral-800 chat-bubble-ai border border-neutral-200 dark:border-neutral-700",
    text: "text-neutral-800 dark:text-neutral-100",
    time: "text-neutral-500 dark:text-neutral-400"
  },
  otherUser: {
    container: "",
    bubble: "bg-neutral-100 dark:bg-neutral-700 rounded-lg",
    text: "text-neutral-800 dark:text-neutral-100",
    time: "text-neutral-500 dark:text-neutral-400"
  }
} as const;

// Sub-components
const MessageAvatar = memo<MessageAvatarProps>(({ user, alt, size = "md" }) => (
  <Avatar className={cn("flex-shrink-0 transition-opacity hover:opacity-80", AVATAR_SIZES[size])}>
    <AvatarImage 
      src={user?.profileImageUrl || ""} 
      alt={alt}
      loading="lazy"
    />
    <AvatarFallback className="bg-neutral-200 dark:bg-neutral-700 text-sm">
      {user?.firstName?.[0]?.toUpperCase() || "U"}
    </AvatarFallback>
  </Avatar>
));

MessageAvatar.displayName = "MessageAvatar";

const AIAvatar = memo<{ size?: keyof typeof AVATAR_SIZES }>(({ size = "md" }) => (
  <div 
    className={cn(
      "flex-shrink-0 bg-primary rounded-full flex items-center justify-center transition-transform hover:scale-105",
      AVATAR_SIZES[size]
    )}
    role="img"
    aria-label="AI Assistant"
  >
    <span className="material-icons text-white text-sm" aria-hidden="true">
      assistant
    </span>
  </div>
));

AIAvatar.displayName = "AIAvatar";

const MessageContent = memo<{
  content: string;
  className?: string;
  isLoading?: boolean;
}>(({ content, className, isLoading }) => (
  <div className={cn("break-words", className)}>
    {isLoading ? (
      <div className="flex items-center space-x-1">
        <span className="animate-bounce">.</span>
        <span className="animate-bounce delay-100">.</span>
        <span className="animate-bounce delay-200">.</span>
      </div>
    ) : (
      <p className="whitespace-pre-wrap">{content}</p>
    )}
  </div>
));

MessageContent.displayName = "MessageContent";

const MessageTimestamp = memo<{
  timestamp: Date | string;
  className?: string;
}>(({ timestamp, className }) => (
  <time 
    className={cn("text-xs mt-1 block", className)}
    dateTime={new Date(timestamp).toISOString()}
    title={new Date(timestamp).toLocaleString()}
  >
    {formatRelativeTime(timestamp)}
  </time>
));

MessageTimestamp.displayName = "MessageTimestamp";

// Main component
const ChatBubble = memo<ChatBubbleProps>(({ 
  message, 
  currentUser, 
  className,
  onRetry,
  onDelete 
}) => {
  // Memoize metadata calculations
  const metadata = useMemo<MessageMetadata>(() => {
    const isCurrentUser = message.userId === currentUser.id;
    const isAI = Boolean(message.isAiResponse);
    
    return {
      isCurrentUser,
      isAI,
      userName: isCurrentUser 
        ? currentUser.firstName || "You"
        : message.user?.firstName || "Unknown user",
      userInitial: isCurrentUser
        ? currentUser.firstName?.[0] || "Y"
        : message.user?.firstName?.[0] || "U",
      avatarUrl: isCurrentUser
        ? currentUser.profileImageUrl || ""
        : message.user?.profileImageUrl || ""
    };
  }, [message.userId, message.isAiResponse, message.user, currentUser]);

  // Get appropriate styles based on message type
  const styles = useMemo(() => {
    if (metadata.isCurrentUser) return MESSAGE_STYLES.currentUser;
    if (metadata.isAI) return MESSAGE_STYLES.ai;
    return MESSAGE_STYLES.otherUser;
  }, [metadata.isCurrentUser, metadata.isAI]);

  // Render avatar based on message type
  const renderAvatar = () => {
    if (metadata.isCurrentUser) {
      return <MessageAvatar user={currentUser} alt="You" />;
    }
    if (metadata.isAI) {
      return <AIAvatar />;
    }
    return <MessageAvatar user={message.user} alt={metadata.userName} />;
  };

  return (
    <div 
      className={cn(
        "flex items-start gap-2 max-w-3xl px-4 py-2 group",
        styles.container,
        className
      )}
      role="article"
      aria-label={`Message from ${metadata.userName}`}
    >
      {/* Left side avatar (for non-current user) */}
      {!metadata.isCurrentUser && renderAvatar()}
      
      {/* Message bubble */}
      <div 
        className={cn(
          "relative px-4 py-3 rounded-lg shadow-sm transition-colors",
          "min-w-[80px] max-w-[calc(100%-3rem)]",
          styles.bubble
        )}
      >
        {/* User name (for other users only) */}
        {!metadata.isCurrentUser && !metadata.isAI && message.user && (
          <div className="text-xs text-neutral-500 dark:text-neutral-400 mb-1 font-medium">
            {metadata.userName}
          </div>
        )}
        
        {/* Message content */}
        <MessageContent 
          content={message.content}
          className={styles.text}
          isLoading={message.isLoading}
        />
        
        {/* Timestamp and actions */}
        <div className="flex items-center justify-between gap-2 mt-1">
          <MessageTimestamp 
            timestamp={message.createdAt}
            className={styles.time}
          />
          
          {/* Action buttons (visible on hover) */}
          {metadata.isCurrentUser && (
            <div className="opacity-0 group-hover:opacity-100 transition-opacity flex gap-1">
              {message.error && onRetry && (
                <button
                  onClick={() => onRetry(message.id)}
                  className="text-xs text-white/70 hover:text-white"
                  aria-label="Retry sending message"
                >
                  <span className="material-icons text-xs">refresh</span>
                </button>
              )}
              {onDelete && (
                <button
                  onClick={() => onDelete(message.id)}
                  className="text-xs text-white/70 hover:text-white"
                  aria-label="Delete message"
                >
                  <span className="material-icons text-xs">delete</span>
                </button>
              )}
            </div>
          )}
        </div>
        
        {/* Error indicator */}
        {message.error && (
          <div className="absolute -bottom-1 -right-1 w-3 h-3 bg-red-500 rounded-full" 
               title="Failed to send" />
        )}
      </div>
      
      {/* Right side avatar (for current user) */}
      {metadata.isCurrentUser && renderAvatar()}
    </div>
  );
});

ChatBubble.displayName = "ChatBubble";

// Export sub-components for flexibility
export { MessageAvatar, AIAvatar, MessageContent, MessageTimestamp };
export default ChatBubble;