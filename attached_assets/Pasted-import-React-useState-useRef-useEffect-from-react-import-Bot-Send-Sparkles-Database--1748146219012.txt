import React, { useState, useRef, useEffect } from 'react';
import { Bot, Send, Sparkles, Database, Search, FileText, Settings, Zap, Loader2, MessageSquare, User, TrendingUp, AlertCircle, Copy, Share2, Bookmark, Plus, Menu, X } from 'lucide-react';

// Mock UI components
const Button = ({ children, className = '', variant = 'default', size = 'default', onClick, disabled, ...props }) => {
  const baseClasses = 'inline-flex items-center justify-center font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500/50 disabled:opacity-50 disabled:cursor-not-allowed';
  
  const variants = {
    default: 'bg-blue-600 hover:bg-blue-700 text-white shadow-sm hover:shadow-md',
    ghost: 'hover:bg-zinc-800/80 text-zinc-300 hover:text-white',
    outline: 'border border-zinc-700/60 bg-zinc-800/40 hover:bg-zinc-700/50 text-zinc-300 hover:text-white hover:border-zinc-600',
    secondary: 'bg-zinc-700/60 hover:bg-zinc-600/70 text-zinc-200 border border-zinc-600/40'
  };
  
  const sizes = {
    default: 'px-4 py-2 rounded-lg text-sm',
    sm: 'px-2 py-1 rounded-md text-xs',
    lg: 'px-6 py-3 rounded-lg text-base'
  };
  
  return (
    <button 
      className={`${baseClasses} ${variants[variant]} ${sizes[size]} ${className}`}
      onClick={onClick}
      disabled={disabled}
      {...props}
    >
      {children}
    </button>
  );
};

const Textarea = ({ className = '', ...props }) => (
  <textarea 
    className={`w-full bg-zinc-900/60 border border-zinc-700/60 rounded-lg px-3 py-2 text-zinc-100 placeholder-zinc-400 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 transition-all ${className}`}
    {...props}
  />
);

const Select = ({ children, value, onValueChange }) => (
  <div className="relative">
    <select 
      className="bg-zinc-800/60 border border-zinc-700/60 rounded-md px-2 py-1 text-xs text-zinc-500 hover:bg-zinc-700/60 hover:border-zinc-600/60 hover:text-zinc-400 focus:outline-none focus:ring-2 focus:ring-blue-500/50 transition-all"
      value={value}
      onChange={(e) => onValueChange?.(e.target.value)}
    >
      {React.Children.map(children, child => 
        React.isValidElement(child) ? child : null
      )}
    </select>
  </div>
);

const SelectTrigger = ({ children, className }) => <div className={className}>{children}</div>;
const SelectContent = ({ children }) => children;
const SelectItem = ({ value, children }) => <option value={value}>{children}</option>;
const SelectValue = () => null;

// Research Progress Component
const ResearchProgress = ({ stage, progress, query, isActive }) => (
  <div className="bg-zinc-900/70 border border-zinc-700/50 rounded-xl p-6 backdrop-blur-sm">
    <div className="flex items-center space-x-3 mb-4">
      <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
        <Search className="w-4 h-4 text-white" />
      </div>
      <div>
        <h3 className="text-sm font-semibold text-zinc-100">Researching...</h3>
        <p className="text-xs text-zinc-400">{query}</p>
      </div>
    </div>
    
    <div className="space-y-3">
      <div className="flex justify-between items-center">
        <span className="text-xs text-blue-400">Stage {stage}/6</span>
        <span className="text-xs text-zinc-400">{Math.round(progress)}%</span>
      </div>
      
      <div className="w-full bg-zinc-800/50 rounded-full h-2 overflow-hidden">
        <div 
          className="h-full bg-gradient-to-r from-blue-500 via-purple-500 to-cyan-400 rounded-full transition-all duration-1000 ease-out"
          style={{ width: `${Math.max(progress, 5)}%` }}
        />
      </div>
      
      {isActive && (
        <div className="flex items-center space-x-2 text-xs text-blue-400">
          <div className="w-1.5 h-1.5 bg-blue-400 rounded-full animate-pulse" />
          <span>Analyzing sources and generating insights...</span>
        </div>
      )}
    </div>
  </div>
);

const formatRelativeTime = (timestamp) => {
  const now = new Date();
  const messageTime = new Date(timestamp);
  const diffInMinutes = Math.floor((now.getTime() - messageTime.getTime()) / (1000 * 60));
  
  if (diffInMinutes < 1) return 'Just now';
  if (diffInMinutes < 60) return `${diffInMinutes}m ago`;
  if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;
  return `${Math.floor(diffInMinutes / 1440)}d ago`;
};

export const ResearchAgent = () => {
  const [message, setMessage] = useState('');
  const [researchDepth, setResearchDepth] = useState('3');
  const [selectedModel, setSelectedModel] = useState('auto');
  const [isSending, setIsSending] = useState(false);
  const [isResearchInProgress, setIsResearchInProgress] = useState(false);
  const [researchProgress, setResearchProgress] = useState(0);
  const [researchStage, setResearchStage] = useState(1);
  const [messages, setMessages] = useState([]);
  const textareaRef = useRef(null);

  // FIXED: Auto-resize textarea
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
      textareaRef.current.style.height = textareaRef.current.scrollHeight + 'px';
    }
  }, [message]);

  // FIXED: Proper completion detection
  useEffect(() => {
    if (isResearchInProgress && !isSending && researchProgress >= 95) {
      console.log('✅ Research completed - clearing progress');
      setTimeout(() => {
        setIsResearchInProgress(false);
        setResearchProgress(0);
        setResearchStage(1);
        
        // Add a mock completed message
        const completedMessage = {
          id: Date.now().toString(),
          role: 'assistant',
          content: `# Research Analysis Complete

## Executive Summary
Your research on "${message}" has been completed successfully with comprehensive analysis from multiple sources.

## Key Findings

### 1. Market Overview
- Current market conditions analyzed
- Key trends identified and documented
- Risk factors assessed

### 2. Data Analysis
- **Primary Sources**: 15+ verified sources
- **Data Quality**: High confidence level
- **Coverage**: Comprehensive market analysis

### 3. Recommendations
- Strategic insights provided
- Actionable recommendations included
- Risk mitigation strategies outlined

## Research Quality Indicators
- ✅ Multi-source verification
- ✅ Real-time data integration
- ✅ Expert analysis applied`,
          timestamp: new Date().toISOString(),
          sources: [
            { title: 'Market Analysis Report', url: '#', domain: 'bloomberg.com' },
            { title: 'Financial Data Review', url: '#', domain: 'reuters.com' },
            { title: 'Industry Research', url: '#', domain: 'wsj.com' }
          ]
        };
        
        setMessages(prev => [...prev, completedMessage]);
      }, 1000);
    }
  }, [isResearchInProgress, isSending, researchProgress, message]);

  const handleSendMessage = () => {
    if (!message.trim() || isSending) return;
    
    console.log('🚀 Starting research:', message);
    
    // Add user message
    const userMessage = {
      id: Date.now().toString(),
      role: 'user',
      content: message,
      timestamp: new Date().toISOString()
    };
    setMessages(prev => [...prev, userMessage]);
    
    // Start research simulation
    setIsSending(true);
    setIsResearchInProgress(true);
    setResearchProgress(0);
    setResearchStage(1);
    
    // Simulate research progress
    const interval = setInterval(() => {
      setResearchProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          setIsSending(false);
          return 100;
        }
        
        // Update stage based on progress
        const newProgress = prev + Math.random() * 12 + 3;
        if (newProgress >= 80) setResearchStage(6);
        else if (newProgress >= 65) setResearchStage(5);
        else if (newProgress >= 50) setResearchStage(4);
        else if (newProgress >= 30) setResearchStage(3);
        else if (newProgress >= 15) setResearchStage(2);
        
        return Math.min(newProgress, 100);
      });
    }, 800);
    
    const currentMessage = message;
    setMessage('');
    
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleNewResearch = () => {
    console.log('🔄 Starting new research session');
    setMessages([]);
    setIsResearchInProgress(false);
    setResearchProgress(0);
    setResearchStage(1);
    setIsSending(false);
    setMessage('');
  };

  const predefinedPrompts = [
    {
      title: "Market Analysis Research",
      description: "Deep dive into current market trends, opportunities, and risk assessment",
      prompt: "Analyze current market trends and identify emerging investment opportunities with detailed financial data and forecasts",
      icon: TrendingUp,
      gradient: "from-emerald-500 to-teal-600"
    },
    {
      title: "Financial Data Analysis",
      description: "Comprehensive financial metrics, ratios, and performance evaluation",
      prompt: "Generate a comprehensive financial analysis including key metrics, ratios, and performance indicators with latest quarterly data",
      icon: Database,
      gradient: "from-blue-500 to-indigo-600"
    },
    {
      title: "Competitive Intelligence",
      description: "Research competitors, market positioning, and strategic advantages",
      prompt: "Research competitive landscape, market positioning, and strategic advantages with detailed competitor analysis",
      icon: Search,
      gradient: "from-purple-500 to-pink-600"
    },
    {
      title: "Risk Assessment Report",
      description: "Evaluate investment risks, opportunities, and risk-adjusted returns",
      prompt: "Assess investment risks, market volatility, and potential opportunities with risk-adjusted return analysis",
      icon: AlertCircle,
      gradient: "from-orange-500 to-red-600"
    }
  ];

  return (
    <div className="flex h-screen bg-gradient-to-br from-zinc-950 via-zinc-900 to-zinc-950">
      {/* Sidebar */}
      <div className="w-64 border-r border-zinc-800/60 bg-zinc-950/80 backdrop-blur-xl">
        <div className="p-4 border-b border-zinc-800/60">
          <div className="flex items-center space-x-3 mb-4">
            <div className="w-9 h-9 bg-gradient-to-br from-blue-600 to-purple-700 rounded-xl flex items-center justify-center shadow-lg">
              <Bot className="w-5 h-5 text-white" />
            </div>
            <div>
              <h2 className="text-sm font-semibold text-zinc-100">Research Agent</h2>
              <p className="text-xs text-zinc-400">AI-Powered Research</p>
            </div>
          </div>
          
          <Button 
            onClick={handleNewResearch}
            className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white shadow-lg hover:shadow-xl transform hover:scale-[1.02] transition-all duration-200"
          >
            <Sparkles className="w-4 h-4 mr-2" />
            New Research
          </Button>
        </div>

        <div className="p-4">
          <h3 className="text-sm font-medium text-zinc-400 mb-4">Recent Conversations</h3>
          <div className="text-sm text-zinc-500">No conversations yet</div>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex flex-col">
        <div className="flex-1 overflow-y-auto p-6 space-y-6">
          {/* Welcome Screen - Fixed condition */}
          {messages.length === 0 && !isResearchInProgress && (
            <div className="flex-1 flex items-center justify-center min-h-[60vh]">
              <div className="text-center max-w-4xl mx-auto px-8">
                <div className="w-16 h-16 bg-gradient-to-br from-blue-600 to-purple-700 rounded-2xl flex items-center justify-center mx-auto mb-6 shadow-2xl">
                  <Bot className="w-8 h-8 text-white" />
                </div>
                
                <h1 className="text-3xl font-bold text-zinc-100 mb-3">
                  Welcome to Research Agent
                </h1>
                <p className="text-lg text-zinc-400 mb-12">
                  Get comprehensive, AI-powered research on any topic with real-time data and expert analysis
                </p>
                
                {/* Predefined Prompt Cards */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 max-w-4xl mx-auto">
                  {predefinedPrompts.map((card, idx) => (
                    <div
                      key={idx}
                      onClick={() => setMessage(card.prompt)}
                      className="group p-6 bg-zinc-900/60 backdrop-blur-sm border border-zinc-800/50 rounded-2xl hover:bg-zinc-800/70 hover:border-zinc-700/70 transition-all duration-300 cursor-pointer transform hover:scale-[1.02] hover:shadow-2xl"
                    >
                      <div className={`w-12 h-12 bg-gradient-to-br ${card.gradient} rounded-xl flex items-center justify-center mb-4 shadow-lg group-hover:shadow-xl transition-shadow`}>
                        <card.icon className="w-6 h-6 text-white" />
                      </div>
                      
                      <h3 className="text-lg font-semibold text-zinc-100 mb-2 group-hover:text-white transition-colors">
                        {card.title}
                      </h3>
                      <p className="text-sm text-zinc-400 group-hover:text-zinc-300 transition-colors leading-relaxed">
                        {card.description}
                      </p>
                      
                      <div className="flex items-center mt-4 text-xs text-zinc-500 group-hover:text-zinc-400 transition-colors">
                        <Sparkles className="w-3 h-3 mr-1" />
                        <span>AI-Powered Research</span>
                      </div>
                    </div>
                  ))}
                </div>
                
                <p className="text-sm text-zinc-500 mt-8 flex items-center justify-center">
                  <Zap className="w-4 h-4 mr-2" />
                  Click any card above or type your own research question below
                </p>
              </div>
            </div>
          )}

          {/* Messages */}
          {messages.map((msg) => (
            <div key={msg.id} className="flex items-start space-x-3">
              {msg.role === 'user' ? (
                <>
                  <div className="flex-1" />
                  <div className="max-w-2xl">
                    <div className="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-4 rounded-2xl rounded-tr-md">
                      {msg.content}
                    </div>
                    <div className="text-xs text-zinc-500 mt-1 text-right">{formatRelativeTime(msg.timestamp)}</div>
                  </div>
                  <div className="w-8 h-8 bg-zinc-600 rounded-full flex items-center justify-center flex-shrink-0">
                    <span className="text-white text-sm font-medium">U</span>
                  </div>
                </>
              ) : (
                <>
                  <div className="w-8 h-8 bg-gradient-to-br from-blue-600 to-purple-700 rounded-full flex items-center justify-center flex-shrink-0">
                    <Bot className="w-5 h-5 text-white" />
                  </div>
                  <div className="flex-1">
                    <div className="bg-zinc-900/60 backdrop-blur-sm border border-zinc-800/50 p-6 rounded-2xl">
                      <div className="prose prose-invert max-w-none">
                        <div className="space-y-4 text-zinc-200">
                          {msg.content.split('\n\n').map((paragraph, idx) => {
                            if (paragraph.startsWith('# ')) {
                              return (
                                <h1 key={idx} className="text-2xl font-bold text-zinc-100 mb-4 pb-3 border-b border-zinc-700/50">
                                  {paragraph.replace('# ', '')}
                                </h1>
                              );
                            } else if (paragraph.startsWith('## ')) {
                              return (
                                <h2 key={idx} className="text-xl font-semibold text-zinc-100 mb-3 mt-6">
                                  {paragraph.replace('## ', '')}
                                </h2>
                              );
                            } else if (paragraph.startsWith('### ')) {
                              return (
                                <h3 key={idx} className="text-lg font-medium text-zinc-100 mb-2 mt-4">
                                  {paragraph.replace('### ', '')}
                                </h3>
                              );
                            } else if (paragraph.startsWith('- **')) {
                              return (
                                <div key={idx} className="ml-4 mb-3 p-3 bg-zinc-800/30 rounded-lg border-l-2 border-blue-500/50">
                                  <div className="font-medium text-zinc-100 mb-1">
                                    {paragraph.match(/\*\*(.*?)\*\*/)?.[1] || ''}
                                  </div>
                                  <div className="text-zinc-300 text-sm">
                                    {paragraph.replace(/- \*\*(.*?)\*\*:\s*/, '')}
                                  </div>
                                </div>
                              );
                            }
                            return (
                              <p key={idx} className="text-zinc-200 leading-relaxed">
                                {paragraph.split('**').map((part, i) => 
                                  i % 2 === 1 ? 
                                    <strong key={i} className="font-semibold text-zinc-100">{part}</strong> : 
                                    part
                                )}
                              </p>
                            );
                          })}
                        </div>
                      </div>
                      
                      {/* Sources */}
                      {msg.sources && msg.sources.length > 0 && (
                        <div className="mt-6 pt-4 border-t border-zinc-800/50">
                          <h4 className="text-sm font-semibold text-zinc-300 mb-3">Research Sources ({msg.sources.length})</h4>
                          <div className="space-y-2">
                            {msg.sources.map((source, idx) => (
                              <div key={idx} className="p-3 bg-zinc-800/30 rounded-lg">
                                <a href={source.url} target="_blank" rel="noopener noreferrer" className="text-zinc-200 hover:text-blue-400 font-medium text-sm">
                                  {source.title}
                                </a>
                                <div className="text-xs text-zinc-500 mt-1">{source.domain}</div>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                </>
              )}
            </div>
          ))}

          {/* Research Progress - Only show when actually in progress */}
          {isResearchInProgress && (
            <div className="flex items-start space-x-3">
              <div className="w-8 h-8 bg-gradient-to-br from-blue-600 to-purple-700 rounded-full flex items-center justify-center flex-shrink-0">
                <Bot className="w-5 h-5 text-white" />
              </div>
              <div className="flex-1">
                <ResearchProgress 
                  stage={researchStage} 
                  progress={researchProgress}
                  query={message || "Analyzing..."}
                  isActive={isSending || isResearchInProgress}
                />
              </div>
            </div>
          )}
        </div>

        {/* FIXED: Input Area with 25K format */}
        <div className="p-6 border-t border-zinc-800/60 bg-zinc-950/80 backdrop-blur-xl">
          <div className="space-y-4">
            {/* Research Controls - ALL 25K */}
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <div className="flex items-center space-x-2">
                  <span className="text-xs text-zinc-500 font-medium">Depth</span>
                  <Select value={researchDepth} onValueChange={setResearchDepth}>
                    <option value="1">Quick (25K)</option>
                    <option value="2">Standard (25K)</option>
                    <option value="3">Deep (25K)</option>
                  </Select>
                </div>

                <div className="flex items-center space-x-2">
                  <span className="text-xs text-zinc-500 font-medium">Model</span>
                  <Select value={selectedModel} onValueChange={setSelectedModel}>
                    <option value="auto">Auto</option>
                    <option value="deepseek">DeepSeek</option>
                    <option value="gemini">Gemini</option>
                  </Select>
                </div>

                <div className="flex items-center space-x-1">
                  <span className="text-xs text-zinc-500 font-medium mr-2">Templates</span>
                  {[
                    { icon: TrendingUp, text: "Market" },
                    { icon: Database, text: "Financial" },
                    { icon: Search, text: "Competitive" },
                    { icon: AlertCircle, text: "Risk" }
                  ].map((template, idx) => (
                    <Button
                      key={idx}
                      variant="outline"
                      size="sm"
                      onClick={() => setMessage(`Research ${template.text.toLowerCase()} analysis for `)}
                      className="h-7 px-2 text-xs"
                    >
                      <template.icon className="w-3 h-3 mr-1" />
                      {template.text}
                    </Button>
                  ))}
                </div>
              </div>

              <div className="flex items-center space-x-2 text-xs text-zinc-500">
                <div className="w-1.5 h-1.5 bg-emerald-400 rounded-full animate-pulse" />
                <span>Ready</span>
              </div>
            </div>

            {/* Input Area */}
            <div className="relative">
              <Textarea
                ref={textareaRef}
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                onKeyDown={handleKeyDown}
                placeholder="Ask me anything about markets, technology, economics, or any research topic..."
                className="min-h-[80px] pr-24 text-sm leading-relaxed rounded-xl"
                rows={3}
              />
              
              <div className="absolute bottom-3 right-3 flex items-center space-x-3">
                <span className="text-xs text-zinc-500 bg-zinc-800/50 px-2 py-1 rounded-md border border-zinc-700/30">
                  {message.length}/2000
                </span>
                <Button
                  onClick={handleSendMessage}
                  disabled={!message.trim() || isSending}
                  size="sm"
                  className="h-9 px-4 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200 disabled:opacity-50 disabled:transform-none disabled:shadow-none border-0"
                >
                  {isSending ? (
                    <>
                      <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                      Researching...
                    </>
                  ) : (
                    <>
                      <Send className="w-4 h-4 mr-2" />
                      Research
                    </>
                  )}
                </Button>
              </div>
            </div>

            {/* Footer Info */}
            <div className="flex items-center justify-between text-xs text-zinc-600">
              <div className="flex items-center space-x-4 text-zinc-500">
                <span className="flex items-center">
                  <Search className="w-3 h-3 mr-1.5" />
                  Real-time data
                </span>
                <span className="flex items-center">
                  <Database className="w-3 h-3 mr-1.5" />
                  Multi-source
                </span>
                <span className="flex items-center">
                  <Zap className="w-3 h-3 mr-1.5" />
                  AI-powered
                </span>
              </div>
              <div className="flex items-center space-x-2 text-zinc-500">
                <kbd className="px-1.5 py-0.5 bg-zinc-800/50 border border-zinc-700/40 rounded text-xs">⏎</kbd>
                <span>to send</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};