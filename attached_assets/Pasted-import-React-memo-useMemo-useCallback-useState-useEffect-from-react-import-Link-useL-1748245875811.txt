import React, { memo, useMemo, useCallback, useState, useEffect } from "react";
import { Link, useLocation } from "wouter";
import { useAuth } from "@/hooks/useAuth";
import { cn } from "@/lib/utils";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { useSchedule } from "@/hooks/useSchedule";
import { formatDateTime } from "@/lib/utils";
import { 
  MessageSquare, 
  Calendar, 
  Users, 
  Sparkles, 
  FileText, 
  GraduationCap, 
  Plane, 
  Bot, 
  Settings, 
  Plus, 
  Home, 
  Bell,
  ChevronDown,
  LogOut,
  Search,
  Moon,
  Sun
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";

// Types
interface SidebarProps {
  className?: string;
  onItemClick?: () => void;
  collapsed?: boolean;
  onCollapsedChange?: (collapsed: boolean) => void;
}

interface NavItem {
  path: string;
  icon: React.ComponentType<{ className?: string }>;
  label: string;
  badge?: string | number;
  description?: string;
  shortcut?: string;
}

interface FamilyRoom {
  id: string;
  name: string;
  emoji?: string;
  memberCount?: number;
  hasUnread?: boolean;
}

// Constants
const NAV_ITEMS: NavItem[] = [
  { 
    path: "/", 
    icon: MessageSquare, 
    label: "Chat",
    description: "AI conversations",
    shortcut: "‚åò1"
  },
  { 
    path: "/schedule", 
    icon: Calendar, 
    label: "Schedule",
    description: "Events & reminders",
    shortcut: "‚åò2"
  },
  { 
    path: "/family-room", 
    icon: Users, 
    label: "Family Room",
    description: "Group conversations",
    shortcut: "‚åò3"
  },
  { 
    path: "/research-agent", 
    icon: Sparkles, 
    label: "Research Agent",
    description: "Advanced research",
    shortcut: "‚åò4"
  },
  { 
    path: "/research-blog", 
    icon: FileText, 
    label: "Research Blog",
    description: "Knowledge base",
    shortcut: "‚åò5"
  },
  { 
    path: "/homework", 
    icon: GraduationCap, 
    label: "Homework Help",
    description: "Educational support",
    shortcut: "‚åò6"
  },
  { 
    path: "/trip", 
    icon: Plane, 
    label: "Trip Planning",
    description: "Travel assistant",
    shortcut: "‚åò7"
  },
];

// Mock family rooms data (replace with actual data)
const FAMILY_ROOMS: FamilyRoom[] = [
  { id: "1", name: "Family Chat", emoji: "üè†", memberCount: 5, hasUnread: true },
  { id: "2", name: "Kids Zone", emoji: "üéÆ", memberCount: 3 },
  { id: "3", name: "Travel Plans", emoji: "‚úàÔ∏è", memberCount: 4 },
];

// Sub-components
const SidebarHeader = memo<{
  collapsed: boolean;
  onToggleCollapse: () => void;
}>(({ collapsed, onToggleCollapse }) => (
  <div className="p-4 border-b border-zinc-800/60 bg-zinc-950/50">
    <div className="flex items-center justify-between">
      <div className={cn(
        "flex items-center gap-3 transition-all",
        collapsed && "justify-center"
      )}>
        <div className="w-10 h-10 bg-gradient-to-br from-blue-600 to-purple-700 rounded-xl flex items-center justify-center shadow-lg flex-shrink-0">
          <Bot className="w-6 h-6 text-white" />
        </div>
        {!collapsed && (
          <div className="min-w-0">
            <h1 className="text-lg font-bold text-zinc-50">Tongkeeper</h1>
            <p className="text-xs text-zinc-400">AI Assistant Platform</p>
          </div>
        )}
      </div>
      <Button
        variant="ghost"
        size="icon"
        onClick={onToggleCollapse}
        className="text-zinc-400 hover:text-zinc-200"
        aria-label={collapsed ? "Expand sidebar" : "Collapse sidebar"}
      >
        <ChevronDown className={cn(
          "w-4 h-4 transition-transform",
          collapsed && "-rotate-90"
        )} />
      </Button>
    </div>
  </div>
));

SidebarHeader.displayName = "SidebarHeader";

const UserProfile = memo<{
  user: any;
  collapsed: boolean;
  onItemClick?: () => void;
}>(({ user, collapsed, onItemClick }) => {
  const [showMenu, setShowMenu] = useState(false);

  return (
    <div className="p-4 border-b border-zinc-800/60 bg-zinc-950/30">
      <div className={cn(
        "flex items-center gap-3",
        collapsed && "justify-center"
      )}>
        <div className="relative">
          <Avatar className="cursor-pointer" onClick={() => setShowMenu(!showMenu)}>
            <AvatarImage 
              src={user?.profileImageUrl || ""} 
              alt={user?.firstName || "User"} 
            />
            <AvatarFallback className="bg-zinc-700 text-zinc-300">
              {user?.firstName?.[0]?.toUpperCase() || "U"}
            </AvatarFallback>
          </Avatar>
          <div className="absolute bottom-0 right-0 w-3 h-3 bg-emerald-400 rounded-full border-2 border-zinc-950" />
        </div>
        
        {!collapsed && (
          <>
            <div className="flex-1 min-w-0">
              <div className="font-semibold text-zinc-50 truncate">
                {user?.firstName} {user?.lastName}
              </div>
              <div className="text-xs text-zinc-400 flex items-center">
                <div className="w-1.5 h-1.5 bg-emerald-400 rounded-full mr-1.5 animate-pulse" />
                Personal Account
              </div>
            </div>
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Link href="/profile">
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={onItemClick}
                      className="text-zinc-400 hover:text-zinc-200"
                    >
                      <Settings className="w-4 h-4" />
                    </Button>
                  </Link>
                </TooltipTrigger>
                <TooltipContent>Settings</TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </>
        )}
      </div>
    </div>
  );
});

UserProfile.displayName = "UserProfile";

const NavLink = memo<{
  item: NavItem;
  isActive: boolean;
  collapsed: boolean;
  onClick?: () => void;
}>(({ item, isActive, collapsed, onClick }) => (
  <TooltipProvider>
    <Tooltip delayDuration={0}>
      <TooltipTrigger asChild>
        <Link href={item.path}>
          <a 
            onClick={onClick}
            className={cn(
              "flex items-center gap-3 rounded-xl px-3 py-2.5 text-sm font-medium transition-all duration-200 w-full relative group",
              isActive
                ? "bg-gradient-to-r from-blue-600/25 to-purple-600/25 text-zinc-50 border border-blue-500/40 shadow-lg backdrop-blur-sm"
                : "text-zinc-400 hover:text-zinc-100 hover:bg-zinc-800/60",
              collapsed && "justify-center px-2"
            )}
          >
            <item.icon className={cn(
              "flex-shrink-0 transition-colors",
              isActive ? "text-blue-400" : "text-zinc-400 group-hover:text-zinc-200",
              collapsed ? "w-5 h-5" : "w-4 h-4"
            )} />
            {!collapsed && (
              <>
                <span className="truncate">{item.label}</span>
                {item.badge && (
                  <Badge variant="secondary" className="ml-auto">
                    {item.badge}
                  </Badge>
                )}
                {isActive && (
                  <div className="absolute right-0 top-1/2 -translate-y-1/2 w-1 h-8 bg-blue-400 rounded-l-full" />
                )}
                {item.shortcut && (
                  <kbd className="hidden lg:inline-flex items-center gap-1 ml-auto text-xs text-zinc-500 group-hover:text-zinc-400">
                    {item.shortcut}
                  </kbd>
                )}
              </>
            )}
          </a>
        </Link>
      </TooltipTrigger>
      {collapsed && (
        <TooltipContent side="right">
          <div>
            <div className="font-medium">{item.label}</div>
            {item.description && (
              <div className="text-xs text-muted-foreground">{item.description}</div>
            )}
          </div>
        </TooltipContent>
      )}
    </Tooltip>
  </TooltipProvider>
));

NavLink.displayName = "NavLink";

const FamilyRoomLink = memo<{
  room: FamilyRoom;
  collapsed: boolean;
  onClick?: () => void;
}>(({ room, collapsed, onClick }) => (
  <Link href={`/family-room/${room.id}`}>
    <button 
      onClick={onClick}
      className="flex items-center gap-3 px-3 py-2 rounded-lg hover:bg-zinc-800/50 hover:text-zinc-200 transition-all duration-200 text-zinc-400 w-full group"
    >
      <div className="w-6 h-6 bg-zinc-700/60 group-hover:bg-zinc-600/70 rounded-lg flex items-center justify-center transition-colors flex-shrink-0">
        <span className="text-sm">{room.emoji || "üí¨"}</span>
      </div>
      {!collapsed && (
        <>
          <span className="text-sm truncate flex-1 text-left">{room.name}</span>
          {room.hasUnread && (
            <div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse" />
          )}
          {room.memberCount && (
            <span className="text-xs text-zinc-500">{room.memberCount}</span>
          )}
        </>
      )}
    </button>
  </Link>
));

FamilyRoomLink.displayName = "FamilyRoomLink";

const ReminderPreview = memo<{
  reminder: any;
  collapsed: boolean;
}>(({ reminder, collapsed }) => {
  if (collapsed) return null;

  return (
    <div className="bg-zinc-900/60 backdrop-blur-sm border border-zinc-800/50 rounded-xl p-3 hover:border-zinc-700/60 transition-all duration-200">
      <div className="flex items-start gap-3">
        <div className="w-8 h-8 bg-gradient-to-br from-blue-600/20 to-purple-600/20 rounded-lg flex items-center justify-center flex-shrink-0 border border-blue-500/20">
          <Calendar className="w-4 h-4 text-blue-400" />
        </div>
        <div className="flex-1 min-w-0">
          <div className="font-medium text-zinc-200 text-sm truncate">
            {reminder.title}
          </div>
          <div className="text-xs text-zinc-400 mt-0.5">
            {formatDateTime(reminder.datetime)}
          </div>
        </div>
        <div className="w-2 h-2 bg-blue-400 rounded-full flex-shrink-0 mt-2 animate-pulse" />
      </div>
    </div>
  );
});

ReminderPreview.displayName = "ReminderPreview";

// Main component
const Sidebar = memo<SidebarProps>(({ 
  className, 
  onItemClick,
  collapsed = false,
  onCollapsedChange
}) => {
  const { user } = useAuth();
  const [location] = useLocation();
  const { upcomingReminders } = useSchedule();
  const [internalCollapsed, setInternalCollapsed] = useState(collapsed);

  // Sync internal state with prop
  useEffect(() => {
    setInternalCollapsed(collapsed);
  }, [collapsed]);

  const isCollapsed = onCollapsedChange ? collapsed : internalCollapsed;

  const handleToggleCollapse = useCallback(() => {
    if (onCollapsedChange) {
      onCollapsedChange(!collapsed);
    } else {
      setInternalCollapsed(!internalCollapsed);
    }
  }, [collapsed, internalCollapsed, onCollapsedChange]);

  const handleItemClick = useCallback(() => {
    onItemClick?.();
  }, [onItemClick]);

  const isActive = useCallback((path: string) => location === path, [location]);

  // Keyboard shortcuts
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.metaKey || e.ctrlKey) {
        const num = parseInt(e.key);
        if (num >= 1 && num <= NAV_ITEMS.length) {
          e.preventDefault();
          window.location.href = NAV_ITEMS[num - 1].path;
        }
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, []);

  return (
    <div 
      className={cn(
        "h-screen flex flex-col border-r border-zinc-800/60 bg-zinc-950/90 backdrop-blur-xl transition-all duration-300",
        isCollapsed ? "w-20" : "w-64",
        className
      )}
      style={{
        background: 'rgba(9, 9, 11, 0.95)',
        backdropFilter: 'blur(20px)',
        WebkitBackdropFilter: 'blur(20px)'
      }}
    >
      {/* Header */}
      <SidebarHeader 
        collapsed={isCollapsed} 
        onToggleCollapse={handleToggleCollapse} 
      />

      {/* User Profile */}
      <UserProfile 
        user={user} 
        collapsed={isCollapsed} 
        onItemClick={handleItemClick} 
      />

      {/* Main Navigation */}
      <nav className="flex-1 px-3 py-4 overflow-y-auto scrollbar-hide">
        <ul className="space-y-1">
          {NAV_ITEMS.map((item) => (
            <li key={item.path}>
              <NavLink
                item={item}
                isActive={isActive(item.path)}
                collapsed={isCollapsed}
                onClick={handleItemClick}
              />
            </li>
          ))}
        </ul>

        {/* Family Rooms Section */}
        <div className="mt-8">
          <div className={cn(
            "px-3 mb-3 flex items-center justify-between",
            isCollapsed && "px-2 justify-center"
          )}>
            {!isCollapsed && (
              <h2 className="text-xs uppercase tracking-wider text-zinc-500 font-semibold flex items-center">
                <div className="w-1 h-4 bg-gradient-to-b from-blue-500 to-purple-500 rounded-full mr-2" />
                Family Rooms
              </h2>
            )}
            <Link href="/family-room/new">
              <Button
                variant="ghost"
                size="icon"
                onClick={handleItemClick}
                className={cn(
                  "text-zinc-400 hover:text-blue-400",
                  isCollapsed && "w-8 h-8"
                )}
              >
                <Plus className="w-4 h-4" />
              </Button>
            </Link>
          </div>

          {/* Family Room Links */}
          <div className="space-y-1">
            {FAMILY_ROOMS.map((room) => (
              <FamilyRoomLink
                key={room.id}
                room={room}
                collapsed={isCollapsed}
                onClick={handleItemClick}
              />
            ))}
          </div>
        </div>
      </nav>

      {/* Upcoming Reminders */}
      {!isCollapsed && upcomingReminders?.length > 0 && (
        <div className="p-4 border-t border-zinc-800/60">
          <h2 className="text-sm font-semibold mb-3 flex items-center text-zinc-300">
            <Bell className="w-4 h-4 text-blue-400 mr-2" />
            Upcoming Reminders
          </h2>
          <ReminderPreview 
            reminder={upcomingReminders[0]} 
            collapsed={isCollapsed} 
          />
        </div>
      )}

      {/* Footer Actions */}
      <div className={cn(
        "p-4 border-t border-zinc-800/60",
        isCollapsed && "p-2"
      )}>
        <div className={cn(
          "flex gap-2",
          isCollapsed && "flex-col items-center"
        )}>
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size={isCollapsed ? "icon" : "sm"}
                  className="text-zinc-400 hover:text-zinc-200 justify-start"
                >
                  <LogOut className="w-4 h-4" />
                  {!isCollapsed && <span className="ml-2">Log out</span>}
                </Button>
              </TooltipTrigger>
              {isCollapsed && <TooltipContent side="right">Log out</TooltipContent>}
            </Tooltip>
          </TooltipProvider>
        </div>
      </div>
    </div>
  );
});

Sidebar.displayName = "Sidebar";

export default Sidebar;